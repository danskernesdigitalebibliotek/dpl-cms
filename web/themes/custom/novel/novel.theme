<?php

/**
 * @file
 * Novel Theme.
 */

use Drupal\Component\Serialization\Json;
use function Safe\file_get_contents;
use function Safe\sprintf;

/**
 * Implements hook_theme().
 *
 * @param mixed[] $existing
 *   An array of existing implementations that may be used
 *   for override purposes.
 * @param string $type
 *   Whether a theme, module, etc. is being processed.
 * @param string $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param string $path
 *   The directory path of the theme or module,
 *   so that it doesn't need to be looked up.
 *
 * @return mixed[]
 *   An associative array of information about theme implementations.
 */
function novel_theme(
  array $existing,
  string $type,
  string $theme,
  string $path
): array {
  return [
    'search_result_item' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app__search_header(array &$variables): void {
  $search_svg = file_get_contents(sprintf('%s/%s',
    \Drupal::theme()->getActiveTheme()->getPath(),
    '/assets/dpl-design-system/icons/collection/Search.svg'
  ));

  $variables += [
    'search_icon' => $search_svg,
    'search_action' => $variables['data']['search-url'] ?? "",
    'input_placeholder_text' => $variables['data']['input-placeholder-text'] ?? "",
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app__search_result(array &$variables): void {
  $variables += [
    'q' => \Drupal::request()->query->get('q') ?? "",
    'showing_results_for_text' => $variables['data']['showing-results-for-text'] ?? "",
    'number_of_fake_result_items' => 5,
  ];

  // Preconnect covers.
  _novel_variables_preconnect_covers($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app__material(array &$variables): void {
  // Preconnect covers.
  _novel_variables_preconnect_covers($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function novel_preprocess_dpl_react_app(array &$variables): void {
  $theme = \Drupal::theme()->getActiveTheme();
  $json_path = sprintf('%s/%s',
    $theme->getPath(),
    'assets/dpl-design-system/fonts.json'
  );

  // Check if a version json file exists and decode the json configuration.
  if ($fonts_data = file_get_contents($json_path)) {
    $fonts = Json::decode($fonts_data);
    foreach ($fonts as $font) {
      $variables['#attached']['html_head_link'][] = [
        [
          'rel' => 'preload',
          'href' => sprintf('/%s/%s/%s',
            $theme->getPath(),
            'assets/dpl-design-system/fonts',
            $font
          ),
          'as' => 'font',
          'type' => 'font/woff2',
          'crossorigin' => 'anonymous',
        ],
        TRUE,
      ];
    }
  }
}

/**
 * Adds preconnect for covers to theme variables.
 *
 * @param mixed[] $variables
 *   The variables for the theme.
 */
function _novel_variables_preconnect_covers(array &$variables): void {
  $react_apps_settings = \Drupal::configFactory()->get('dpl_react_apps.settings');
  if (!$services = $react_apps_settings->get('services')) {
    return;
  }

  if ($cover_service = $services['cover'] ?? NULL) {
    if (!$cover_url = $cover_service['base_url']) {
      return;
    }

    $variables['#attached']['html_head_link'] = array_merge(
      $variables['#attached']['html_head_link'] ?? [],
      [
        [
          [
            'rel' => 'preconnect',
            'href' => $cover_url,
          ],
          TRUE,
        ],
        [
          [
            'rel' => 'preconnect',
            'href' => 'https://res.cloudinary.com',
          ],
          TRUE,
        ],
      ],
    );
  }
}
