<?php

/**
 * @file
 * DPL consumers module.
 */

use Drupal\dpl_consumers\Consumer;
use Drupal\dpl_consumers\ConsumerRole;
use Drupal\dpl_consumers\ConsumerUser;

/**
 * Get consumer by Client ID.
 *
 * @return string
 *   The consumer UUID.
 *
 * @throws \Exception
 */
function dpl_consumers_get_consumer_uuid(string $client_id): string {
  try {
    $consumer = \Drupal::entityTypeManager()
      ->getStorage('consumer')
      ->loadByProperties(['client_id' => $client_id]);

    // We assume that there is only one consumer with the given client ID
    // as it is used an as unique identifier (machine name).
    if (!empty($consumer)) {
      $consumer = reset($consumer);

      return $consumer->uuid() ?? throw new \Exception('UUID not found.');
    }
    else {
      throw new \Exception('Consumer not found.');
    }
  }
  catch (\Exception $e) {
    throw new \Exception($e->getMessage());
  }
}

/**
 * Get known consumers, users and roles.
 *
 * @return array
 *   An array of consumers, users and roles.
 */

/**
 * Get known consumers, users and roles.
 *
 * @return mixed[]
 *   An array of consumers, users and roles.
 */
function dpl_consumers_known_consumers_settings(): array {
  // Check if we have the necessary secrets for new consumers and their users.
  if (!$bnf_consumer_secret = getenv('BNF_GRAPHQL_CONSUMER_SECRET')) {
    throw new \Exception('BNF_GRAPHQL_CONSUMER_SECRET not found.');
  }
  if (!$go_consumer_secret = getenv('GO_GRAPHQL_CONSUMER_SECRET')) {
    throw new \Exception('GO_GRAPHQL_CONSUMER_SECRET not found.');
  }
  if (!$bnf_consumer_user_password = getenv('BNF_GRAPHQL_CONSUMER_USER_PASSWORD')) {
    throw new \Exception('BNF_GRAPHQL_CONSUMER_USER_PASSWORD not found.');
  }
  if (!$go_consumer_user_password = getenv('GO_GRAPHQL_CONSUMER_USER_PASSWORD')) {
    throw new \Exception('GO_GRAPHQL_CONSUMER_USER_PASSWORD not found.');
  }

  return [
    [
      'consumer' => new Consumer('bnf_graphql', \Drupal::entityTypeManager(), 'BNF GraphQL', $bnf_consumer_secret),
      'user' => new ConsumerUser('bnf_graphql', \Drupal::entityTypeManager(), $bnf_consumer_user_password),
      'role' => new ConsumerRole('bnf_graphql_client'),
    ],
    [
      'consumer' => new Consumer('go_graphql', \Drupal::entityTypeManager(), 'GO GraphQL', $go_consumer_secret),
      'user' => new ConsumerUser('go_graphql', \Drupal::entityTypeManager(), $go_consumer_user_password),
      'role' => new ConsumerRole('go_graphql_client'),
    ],
  ];
}

/**
 * Get known consumers.
 *
 * @return mixed[]
 *   An array of consumers keyed by client id.
 */
function dpl_consumers_get_known_consumers(): array {
  return array_reduce(
    dpl_consumers_known_consumers_settings(),
    static function (array $carry, array $settings): array {
      $consumer_client_id = $settings['consumer']->clientId;
      $carry[$consumer_client_id] = $settings['consumer']->load();

      return $carry;
    },
    []
  );
}
