<?php

/**
 * @file
 * Module file for DPL Event.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\dpl_event\EventState;
use Drupal\job_scheduler\Entity\JobSchedule;
use Drupal\node\NodeInterface;
use Safe\DateTimeImmutable as DateTimeImmutable;

/**
 * Implements hook_cron_job_scheduler_info().
 *
 * @return non-empty-array<string, array{'worker callback': string}>
 *   Job scheduler information.
 */
function dpl_event_cron_job_scheduler_info(): array {
  return [
    "dpl_event_set_occurred" => [
      "worker callback" => 'dpl_event_set_occurred_callback',
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function dpl_event_node_insert(NodeInterface $node): void {
  if (dpl_event_node_is_event($node) && dpl_event_event_is_active($node)) {
    dpl_event_schedule_set_occurred($node);
  }
}

/**
 * Implements hook_node_update().
 */
function dpl_event_node_update(NodeInterface $node): void {
  if (dpl_event_node_is_event($node) && dpl_event_event_is_active($node)) {
    dpl_event_schedule_set_occurred($node);
  }
}

/**
 * Determine whether a node is of the event type managed by this module.
 */
function dpl_event_node_is_event(NodeInterface $node): bool {
  return $node->getType() === "event";
}

/**
 * Determine if an event is considered active.
 *
 * An event is considered active if it has not occurred or been cancelled.
 */
function dpl_event_event_is_active(NodeInterface $event): bool {
  /** @var \Drupal\enum_field\Plugin\Field\FieldType\EnumItemList $event_state */
  $event_state = $event->get("field_event_state");
  return !(in_array(EventState::Cancelled, $event_state->enums())
    || in_array(EventState::Occurred, $event_state->enums()));
}

/**
 * Schedule setting an event to occurred in the future.
 */
function dpl_event_schedule_set_occurred(NodeInterface $event): void {
  $now_timestamp = \Drupal::time()->getCurrentTime();

  $event_date = $event->get('field_event_date')->get(0);
  if (!$event_date) {
    return;
  }
  $event_date_values = $event_date->getValue();
  if (!$event_date_values || empty($event_date_values["end_value"])) {
    return;
  }
  $event_end_date = new DateTimeImmutable($event_date_values["end_value"]);
  $event_end_timestamp = $event_end_date->getTimestamp();

  $job = [
    'name' => 'dpl_event_set_occurred',
    'type' => 'event',
    'id' => $event->id(),
    // The period is the number of seconds to wait between job executions. A
    // negative period means that the job will be executed as soon as
    // possible. By setting periodic false the job is only executed once.
    'period' => $event_end_timestamp - $now_timestamp,
    'periodic' => FALSE,
  ];

  /** @var \Drupal\job_scheduler\JobSchedulerInterface $scheduler */
  $scheduler = \Drupal::service('job_scheduler.manager');
  // Remove any preexisting job with the same name, type and id.
  $scheduler->remove($job);
  // Schedule the new update.
  $scheduler->set($job);

  \Drupal::logger('dpl_event')->debug(
    'Scheduled "occurred" update for event %event_id at %end_time',
    ['%event_id' => $event->id(), '%end_time' => $event_end_date->format('c')]
  );
}

/**
 * Callback to be executed for scheduled jobs.
 */
function dpl_event_set_occurred_callback(JobSchedule $job): void {
  $event = \Drupal::entityTypeManager()->getStorage('node')->load($job->getId());
  if (!$event) {
    return;
  }

  // Set state to occurred for events we consider active.
  if (dpl_event_event_is_active($event)) {
    $event->set("field_event_state", EventState::Occurred);
    $event->save();
  }
}

/**
 * Implements hook_form_node_event_form_alter().
 */
function dpl_event_form_node_event_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Use the generic "Access" value as the default for the first ticket
  // category when creating events.
  if (isset($form["field_ticket_categories"]["widget"][0]["subform"]["field_ticket_category_name"]["widget"][0]["value"])) {
    $form["field_ticket_categories"]["widget"][0]["subform"]["field_ticket_category_name"]["widget"][0]["value"]["#default_value"] = t('Access', [], ['context' => 'dpl_event']);
  }
  else {
    throw new DomainException("Unable to locate name field for first ticket category. Cannot set default value.");
  }
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Preprocesses the 'field_event_link' for Drupal entities to alter its display
 * based on the event's state. It updates the button title and sets an
 * 'event_is_active' flag depending on the event state.
 */
function dpl_event_preprocess_field(array &$variables): void {
  // Get the field name from the variables array. Default to NULL if not set.
  $field_name = $variables['field_name'] ?? NULL;

  // Return early if 'field_event_link' is present without a title.
  if ($field_name !== 'field_event_link' ||
    empty($variables['items'][0]['content']['#title'])) {
    return;
  }

  // Return if the element lacks a NodeInterface or an entity object.
  $node = $variables['element']['#object'] ?? NULL;
  if (!($node instanceof NodeInterface)) {
    return;
  }

  // Get the event states from the 'field_event_state' field.
  /** @var \Drupal\enum_field\Plugin\Field\FieldType\EnumItemList $event_state_field */
  $event_state_field = $node->get('field_event_state');
  $event_states = $event_state_field->enums();
  // Select the first event state or NULL if not available.
  $event_state = $event_states[0] ?? NULL;

  // Check if the event state is valid. If not, return early.
  if (!($event_state instanceof EventState)) {
    return;
  }

  // Set 'event_is_active' flag if event state is neither of the following.
  $variables['event_is_active'] = !in_array($event_state, [
    EventState::Occurred,
    EventState::Cancelled,
    EventState::SoldOut,
    EventState::TicketSaleNotOpen,
  ]);

  // After determining the 'event_is_active' flag, check if the event is active.
  if ($variables['event_is_active']) {
    // If active, set a translatable string as the title.
    $variables['items'][0]['content']['#title'] = t('Buy tickets');
    return;
  }
  else {
    // Update the title of the button to the label of the current event state.
    $variables['items'][0]['content']['#title'] = $event_state->label();
  }
}

/**
 * Implements hook_preprocess_field__field_ticket_category_price().
 *
 * Adds an array of formatted prices.
 */
function dpl_event_preprocess_field__field_ticket_category_price(array &$variables) : void {
  /** @var \Drupal\dpl_event\PriceFormatter $price_formatter */
  $price_formatter = \Drupal::service('dpl_event.price_formatter');
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $variables['element']['#items'];
  $prices = array_map(function (array $price) use ($price_formatter): string {
    return $price_formatter->formatPrice($price["value"]);
  }, $items->getValue());
  $variables['prices'] = $prices;
}
