<?php

/**
 * @file
 * Mobilesearch integration.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\eonext_mobilesearch\Event\EntityActionEvent;
use Drupal\eonext_mobilesearch\Form\MobilesearchNodesExportForm;
use Drupal\eonext_mobilesearch\Mobilesearch\DTO\MobilesearchEntityInterface;

/**
 * Implements hook_entity_insert().
 */
function eonext_mobilesearch_entity_insert(EntityInterface $entity): void {
  $event = new EntityActionEvent($entity, EntityActionEvent::EVENT_ENTITY_INSERT);

  $bundleConfig = \Drupal::config(MobilesearchNodesExportForm::CONFIG_ID);
  $bundleEnabledToPush = (bool) $bundleConfig->get($entity->bundle());

  if ($bundleEnabledToPush && $event->shouldTrigger()) {
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, EntityActionEvent::EVENT_ENTITY_INSERT);
  }
}

/**
 * Implements hook_entity_update().
 */
function eonext_mobilesearch_entity_update(EntityInterface $entity): void {
  $event = new EntityActionEvent($entity, EntityActionEvent::EVENT_ENTITY_UPDATE);

  $bundleConfig = \Drupal::config(MobilesearchNodesExportForm::CONFIG_ID);
  $bundleEnabledToPush = (bool) $bundleConfig->get($entity->bundle());

  if ($bundleEnabledToPush && $event->shouldTrigger()) {
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, EntityActionEvent::EVENT_ENTITY_UPDATE);
  }
}

/**
 * Implements hook_entity_delete().
 */
function eonext_mobilesearch_entity_delete(EntityInterface $entity): void {
  $event = new EntityActionEvent($entity, EntityActionEvent::EVENT_ENTITY_DELETE);

  $bundleConfig = \Drupal::config(MobilesearchNodesExportForm::CONFIG_ID);
  $bundleEnabledToPush = (bool) $bundleConfig->get($entity->bundle());

  if ($bundleEnabledToPush && $event->shouldTrigger()) {
    /** @var \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher */
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch($event, EntityActionEvent::EVENT_ENTITY_DELETE);
  }
}

/**
 * Implements hook_mobilesearch_push_alter().
 *
 * @param \Drupal\eonext_mobilesearch\Mobilesearch\DTO\NodeEntityDto $payload
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function eonext_mobilesearch_mobilesearch_push_alter(MobilesearchEntityInterface $payload, EntityInterface $entity): void {
  if ($entity->getEntityTypeId() !== 'eventinstance') {
    return;
  }

  $payload->setNid(20000000 + (int) $payload->getNid());
  $payload->setType('ding_event');

  $fields = $payload->getFields();

  $replacement_map = [
    'event_description' => 'field_ding_event_lead',
    'event_link_uri' => 'field_ding_event_ticket_link',
  ];

  foreach ($replacement_map as $field => $replacement) {
    if (array_key_exists($field, $fields)) {
      /** @var \Drupal\ddbems_mobilesearch\Mobilesearch\DTO\FieldDto $dto_field */
      $dto_field = $fields[$field];
      unset($fields[$field]);
      $fields[$replacement] = $dto_field;
    }
  }

  $removal_map = [
    'vid',
    'revision_timestamp', 'revision_log',
    'status', 'promote',
    'sticky', 'default_langcode',
    'revision_default', 'revision_translation_affected',
  ];
  foreach ($removal_map as $field) {
    unset($fields[$field]);
  }

  $payload->setFields($fields);
}
