<?php

/**
 * @file
 * Dpl_react drupal extension file.
 *
 * General handling of importing
 * and using the DPL react components as libraries.
 */

use Drupal\Component\Serialization\Json;
use Drupal\dpl_react\DplReactInterface;

use function Safe\file_get_contents as file_get_contents;
use function Safe\json_encode;
use function Safe\sprintf as sprintf;

/**
 * Implements hook_library_info_alter().
 *
 * @param mixed[] $libraries
 *   An associative array of libraries registered by $extension.
 * @param string $extension
 *   Can either be 'core' or the machine name of the extension
 *   that registered the libraries.
 */
function dpl_react_library_info_alter(array &$libraries, string $extension): void {
  $library_info = NULL;
  if ($extension != 'dpl_react') {
    return;
  }

  $version_file = 'libraries/dpl-react/version.json';

  if (!file_exists($version_file)) {
    \Drupal::logger('dpl_react')
      ->error('Version file in libraries/dpl-react is missing!');
    return;
  }

  // Check if a version json file exists and decode the json configuration.
  if ($library_info_json = file_get_contents($version_file)) {
    $library_info = Json::decode($library_info_json);
  }
  if (!$library_info || !isset($library_info['version'])) {
    return;
  }

  // Set the version from the assets on all libraries.
  foreach (array_keys($libraries) as $library) {
    $libraries[$library]['version'] = $library_info['version'];
  }
}

/**
 * Returns the url to the instance of the Material List service to use.
 *
 * @return string
 *   Url to Material List service instance.
 */
function dpl_react_material_list_url(): string {
  return DplReactInterface::DPL_REACT_MATERIAL_LIST_URL;
}

/**
 * Returns the url to the instance of the Follow Searches service to use.
 *
 * @return string
 *   Url to Follow Searches service instance.
 */
function dpl_react_follow_searches_url(): string {
  return DplReactInterface::DPL_REACT_FOLLOW_SEARCHES_URL;
}

/**
 * Returns the url to the instance of the Cover service to use.
 *
 * @return string
 *   Url to Cover service instance.
 */
function dpl_react_cover_service_url(): string {
  return DplReactInterface::DPL_REACT_COVER_SERVICE_URL;
}

/**
 * Implements hook_theme().
 *
 * @param mixed[] $existing
 *   An array of existing implementations that may be used
 *   for override purposes.
 * @param string $type
 *   Whether a theme, module, etc. is being processed.
 * @param string $theme
 *   The actual name of theme, module, etc. that is being being processed.
 * @param string $path
 *   The directory path of the theme or module,
 *   so that it doesn't need to be looked up.
 *
 * @return mixed[]
 *   An associative array of information about theme implementations.
 */
function dpl_react_theme(
  array $existing,
  string $type,
  string $theme,
  string $path
): array {
  return [
    'dpl_react_app' => [
      'variables' => [
        'name' => NULL,
        'data' => [],
        'attributes' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function dpl_react_preprocess_dpl_react_app(array &$variables): void {
  $attributes = [];
  $attributes['data-dpl-app'] = $variables['name'];

  foreach ($variables['data'] as $prop => $value) {
    if (is_array($value)) {
      $value = json_encode($value);
    }
    $attributes['data-' . $prop] = $value;
  }

  $variables['attributes'] = array_merge(
    $variables['attributes'] ?? [],
    $attributes
  );

  $variables['#attached']['library'][] = sprintf('dpl_react/%s', $variables['name']);

  $variables['#cache']['tags'][] = 'dpl_react_app';
  $variables['#cache']['tags'][] = 'dpl_react_app:' . $variables['name'];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 *
 * @return string[]
 *   An array of suggestions.
 */
function dpl_react_theme_suggestions_dpl_react_app(array $variables) {
  $suggestions = [];
  $suggestions[] = 'dpl_react_app__' . str_replace('-', '_', $variables['name']);
  return $suggestions;
}
