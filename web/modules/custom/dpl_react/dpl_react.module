<?php

/**
 * @file
 * Dpl_react drupal extension file.
 *
 * General handling of importing
 * and using the DPL react components as libraries.
 */

use Drupal\Component\Serialization\Json;
use Drupal\dpl_react\DplReactInterface;
use function Safe\file_get_contents as file_get_contents;
use function Safe\sprintf as sprintf;

/**
 * Implements hook_library_info_alter().
 *
 * @param mixed[] $libraries
 *   An associative array of libraries registered by $extension.
 * @param string $extension
 *   Can either be 'core' or the machine name of the extension
 *   that registered the libraries.
 */
function dpl_react_library_info_alter(array &$libraries, string $extension): void {
  $library_info = NULL;
  if ($extension != 'dpl_react') {
    return;
  }

  $version_file = 'libraries/dpl-react/version.json';

  if (!file_exists($version_file)) {
    \Drupal::logger('dpl_react')
      ->error('Version file in libraries/dpl-react is missing!');
    return;
  }

  // Check if a version json file exists and decode the json configuration.
  if ($library_info_json = file_get_contents($version_file)) {
    $library_info = Json::decode($library_info_json);
  }
  if (!$library_info || !isset($library_info['version'])) {
    return;
  }

  // Set the version from the assets on all libraries.
  foreach (array_keys($libraries) as $library) {
    $libraries[$library]['version'] = $library_info['version'];
  }
}

/**
 * Return render array for an app.
 *
 * @param string $name
 *   Name of the app.
 * @param mixed[] $data
 *   Data for the app.
 *
 * @return mixed[]
 *   The app render array.
 */
function dpl_react_render(string $name, array $data = []): array {
  $attributes = [];

  $attributes['data-dpl-app'] = $name;

  foreach ($data as $prop => $value) {
    $attributes['data-' . $prop] = $value;
  }

  $build = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => $attributes,
    // Supply an empty string so we don't create a self closing element.
    '#value' => '',
    '#attached' => [
      'library' => [
        sprintf('dpl_react/%s', $name),
      ],
    ],
  ];

  return $build;
}

/**
 * Returns the url to the instance of the Material List service to use.
 *
 * @return string
 *   Url to Material List service instance.
 */
function dpl_react_material_list_url(): string {
  return DplReactInterface::DPL_REACT_MATERIAL_LIST_URL;
}

/**
 * Returns the url to the instance of the Follow Searches service to use.
 *
 * @return string
 *   Url to Follow Searches service instance.
 */
function dpl_react_follow_searches_url(): string {
  return DplReactInterface::DPL_REACT_FOLLOW_SEARCHES_URL;
}

/**
 * Returns the url to the instance of the Cover service to use.
 *
 * @return string
 *   Url to Cover service instance.
 */
function dpl_react_cover_service_url(): string {
  return DplReactInterface::DPL_REACT_COVER_SERVICE_URL;
}
