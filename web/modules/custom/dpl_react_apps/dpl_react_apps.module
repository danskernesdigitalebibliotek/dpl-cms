<?php

/**
 * @file
 * Dpl_react_app drupal module file.
 *
 * Is providing theme variables
 * in order to integrate the DPL react apps in the site
 * and various other tasks eg. providing rides and controllers for rendering.
 */

use Drupal\Core\GeneratedUrl;
use Drupal\Core\Url;
use Drupal\dpl_react_apps\Controller\DplReactAppsController;

/**
 * Implements template_preprocess_page().
 *
 * @param mixed[] $variables
 *   Theme variables.
 */
function dpl_react_apps_preprocess_page(array &$variables): void {
  $variables['search'] = [
    'header' => [
      '#theme' => 'dpl_react_app',
      '#name' => 'search-header',
      '#data' => [
        // Text.
        'autosuggest-animated-series-category-text' => t('Animated series', [], ['context' => 'Search Header']),
        'autosuggest-audio-book-category-text' => t('Audio books', [], ['context' => 'Search Header']),
        'autosuggest-book-category-text' => t('Books', [], ['context' => 'Search Header']),
        'autosuggest-ebook-category-text' => t('E-books', [], ['context' => 'Search Header']),
        'autosuggest-film-category-text' => t('Movies', [], ['context' => 'Search Header']),
        'autosuggest-game-category-text' => t('Games', [], ['context' => 'Search Header']),
        'autosuggest-music-category-text' => t('Music', [], ['context' => 'Search Header']),
        'et-al-text' => t('et al.', [], ['context' => 'Search Header']),
        'in-text' => t('in', [], ['context' => 'Search Header']),
        'input-placeholder-text' => t('Start typing in order to search', [], ['context' => 'Search Header']),
        'loading-text' => t('Loading', [], ['context' => 'Search Header']),
        'search-header-icon-alt-text' => t('Search button', [], ['context' => 'Search Header']),
        'search-header-input-label' => t('Search header input', [], ['context' => 'Search Header']),
        'search-no-valid-characters-error-text' => t('Input must contain at least one non-whitespace character.', [], ['context' => 'Search Header']),
        'string-suggestion-author-text' => t('Author', [], ['context' => 'Search Header']),
        'string-suggestion-topic-text' => t('Topic', [], ['context' => 'Search Header']),
        'string-suggestion-work-text' => t('Work', [], ['context' => 'Search Header']),
      // Add external API base urls.
      ] + DplReactAppsController::externalApiBaseUrls(),
    ],
  ];
}

/**
 * Implements hook_dpl_react_apps_data().
 */
function dpl_react_apps_dpl_react_apps_data(array &$data): void {
  $data['texts'] += [
    'alert-error-close' => t('Close', [], ['context' => 'React apps (Global error handling)']),
    'alert-error-message' => t('An error occurred', [], ['context' => 'React apps (Global error handling)']),
  ];

  $data['urls'] += [
    'dpl-cms-base' => dpl_react_apps_get_dpl_cms_base_url(),
    'search' => dpl_react_apps_ensure_url_is_string(
      Url::fromRoute('dpl_react_apps.search_result')->toString()
    ),
    // React applications support variable replacement where variables are
    // prefixed with :. Specify the variable :workid as a parameter to let the
    // route build the url. Unfortunatly : will be encoded as %3A so we have to
    // decode the url again to make replacement work.
    'material' => urldecode(dpl_react_apps_ensure_url_is_string(
      Url::fromRoute('dpl_react_apps.work')
        ->setRouteParameter('wid', ':workid')
        ->toString()
    )),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param mixed[] $variables
 *   The variables for the theme hook.
 */
function dpl_react_apps_preprocess_dpl_react_app(array &$variables): void {
  // Add data from other modules.
  $data = [
    'urls' => [],
    'texts' => [],
    'configs' => [],
  ];
  \Drupal::moduleHandler()->invokeAll('dpl_react_apps_data', [&$data]);
  foreach ($data as $scope => $values) {
    if (empty($values)) {
      continue;
    }
    foreach ($values as $key => $value) {
      $variables['attributes'] += [
        implode('-', ['data', $key, rtrim($scope, 's')]) => $value,
      ];
    }
  }
}

/**
 * Renew texts for multiple apps.
 *
 * @return mixed[]
 *   Texts props.
 */
function dpl_react_apps_texts_renewal(): array {
  // These texts are shared between multiple apps.
  // Instead of defing them in each app we define them here.
  return [
    'renew-button-text' => t('Renew', [], ['context' => 'Renew loan']),
    'renew-cannot-be-renewed-text' => t('Cannot be renewed', [], ['context' => 'Renew loan']),
    'renew-group-modal-loans-button-text' => t('Ok', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-error-status-text' => t('Something went wrong renewing your loans. Please try again.', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-error-title-text' => t('Renewing your loans failed', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-no-renewals-possible-error-status-text' => t('For some reason, no one of your loans could be renewed.', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-no-renewals-possible-error-title-text' => t('No loans could be renewed', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-success-status-text' => t('{"type":"plural","text":["1 loan has been renewed.","@count loans have been renewed."]}', [], ['context' => 'Renew loan (group modal)']),
    'renew-group-modal-loans-success-title-text' => t('You have renewed your loans', [], ['context' => 'Renew loan (group modal)']),
    'renew-material-loan-button-text' => t('Ok', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-error-status-text' => t('omething went wrong renewing your loan. Please try again.', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-error-title-text' => t('Renewal of your loan failed', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-no-renewals-possible-error-status-text' => t('For some reason, your loan could not be renewed.', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-no-renewals-possible-error-title-text' => t('The loan could not be renewed', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-success-status-text' => t('1 loan was renewed.', [], ['context' => 'Renew loan (material)']),
    'renew-material-loan-success-title-text' => t('You have renewed your loan', [], ['context' => 'Renew loan (material)']),
    'renew-processing-text' => t('Processing...', [], ['context' => 'Renew loan']),
  ];
}

/**
 * Make sure that generated url is a string.
 *
 * @param string|\Drupal\Core\GeneratedUrl $url
 *   Drupal generated Url object.
 */
function dpl_react_apps_ensure_url_is_string(string|GeneratedUrl $url): string {
  if ($url instanceof GeneratedUrl) {
    $url = $url->getGeneratedUrl();
  }

  return $url;
}

/**
 * Get the base url of the dpl cms.
 *
 * @return string
 *   The base url of the dpl cms.
 */
function dpl_react_apps_get_dpl_cms_base_url(): string {
  return rtrim(dpl_react_apps_ensure_url_is_string(
    Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString()
  ), "/");
}

/**
 * Format urls used by the apps.
 *
 * @param string|null $url
 *   Url to format.
 * @param string $fallbackUrl
 *   If the url param is not present.
 *
 * @return string
 *   Formatted url.
 */
function dpl_react_apps_format_app_url(string|NULL $url, string $fallbackUrl = ''): string {
  if (!empty($url)) {
    return $url;
  }

  return $fallbackUrl ?: dpl_react_apps_get_dpl_cms_base_url();
}
