<?php

/**
 * @file
 * DPL webform install file.
 */

use Drupal\drupal_typed\DrupalTyped;
use Drupal\locale\StringStorageInterface;

/**
 * Add all webforms to config ignore.
 */
function dpl_webform_update_10000(): string {
  $config_factory = \Drupal::configFactory();
  $config_ignore_config_key = 'config_ignore.settings';

  // We add the new webform.webform.* to config_ignore.settings
  // as the settings will otherwise risk being deleted by when
  // drush deploy is running configuration import.
  $config_ignore_settings = $config_factory->getEditable($config_ignore_config_key);
  $ignored_configs = $config_ignore_settings->get('ignored_config_entities');
  $ignored_configs[] = 'webform.webform.*';
  $config_ignore_settings->set('ignored_config_entities', $ignored_configs)->save();
  return 'webform.webform.* is added to ignored configs.';
}

/**
 * Save all webforms to force new email handler configuration.
 */
function dpl_webform_update_10001(): string {
  $webform_storage = \Drupal::entityTypeManager()->getStorage('webform');
  $webforms = $webform_storage->loadMultiple();

  /** @var \Drupal\webform\WebformInterface $webform */
  foreach ($webforms as $webform) {
    $webform->save();
  }

  return 'All webform email handlers saved.';
}

/**
 * Delete all webform configuration translations.
 *
 * We don't want to have translated webform configurations as
 * they are taking preceedence over the original configuration,
 * and thus making editors unable to change configuration on the
 * contact webform.
 */
function dpl_webform_update_10002(): string {
  $webform_id = 'webform.webform.contact';
  $language = 'da';

  /** @var \Drupal\language\Config\LanguageConfigFactoryOverride $language_config_factory_override */
  $language_config_factory_override = \Drupal::service('language.config_factory_override');
  $language_config_factory_override->getOverride($language, $webform_id)->delete();

  return 'All translations for the webform ' . $webform_id . ' have been deleted.';
}

/**
 * Delete translation of webform.settings.yml.
 *
 * Due to some faulty, prior translation, the danish version of this file
 * has duplicate keys, which causes major issues on the site when loading
 * the webform settings.
 */
function dpl_webform_update_10003(): string {
  $config_id = 'webform.settings';
  $language = 'da';

  /** @var \Drupal\language\Config\LanguageConfigFactoryOverride $language_config_factory_override */
  $language_config_factory_override = \Drupal::service('language.config_factory_override');
  $language_config_factory_override->getOverride($language, $config_id)->delete();

  return "DA translations for the $config_id have been deleted.";
}

/**
 * Remove last traces of faulty webform translation.
 */
function dpl_webform_update_10004(): string {
  $feedback = [];

  // Rerun deletion of existing translation. It will have been recreated if
  // translation import has run after dpl_webform_update_10003() as the
  // translation will be lingering in the local string storage.
  try {
    $feedback[] = dpl_webform_update_10003();
  }
  catch (\Throwable $t) {
    $feedback[] = "Unable to rerun dpl_webform_update_10003: {$t->getMessage()}.";
  }

  $translation_storage = DrupalTyped::service(StringStorageInterface::class, 'locale.storage');
  // webform.settings:test:names is the part of the configuration with invalid
  // data. This is set as the translation context so we can query based on this.
  $translation = $translation_storage->findTranslation(['context' => 'webform.settings:test:names']);
  if ($translation) {
    $translation->delete();
    $feedback[] = 'Deleted faulty local translation string for webform.settings:test:names.';
  }
  else {
    $feedback[] = 'Unable to locate faulty local translation string for webform.settings:test:names.';
  }

  return implode("\n", $feedback);
}
