<?php

/**
 * @file
 * Ddb_react_demo_mk6 drupal module file.
 */

// phpcs:ignore
define('DDB_REACT_DEMO_MK6_FOLLOW_SEARCHES_URL', 'https://prod.followsearches.dandigbib.org');
// phpcs:ignore
define('DDB_REACT_DEMO_MK6_MATERIAL_LIST_URL', 'https://prod.materiallist.dandigbib.org');
// phpcs:ignore
define('DDB_REACT_DEMO_MK6_COVER_SERVICE_URL', 'https://cover.dandigbib.org/api/v2');

use Drupal\Component\Serialization\Json;

/**
 * Implements hook_library_info_alter().
 */
function ddb_react_demo_mk6_library_info_alter(array &$libraries, $module) {
  if ($module != 'ddb_react_demo_mk6') {
    return;
  }

  // Check if a version json file exists and decode the json configuration.
  if ($library_info_json = file_get_contents('libraries/ddb-react/version.json')) {
    $library_info = Json::decode($library_info_json);
  }
  if (!$library_info || !isset($library_info['version'])) {
    return;
  }

  // Set the version from the assets on all libraries.
  foreach ($libraries as $library) {
    $libraries[$library]['version'] == $library_info['version'];
  }
}

/**
 * Construct button render array.
 *
 * @return array
 *   Render array with button.
 */
function ddb_react_demo_mk6_button() {
  $data = [
    'material-list-url' => ding_react_material_list_url(),
    'id' => 100,
    'add-text' => t('Add to checklist'),
    'add-error-text' => t('An error occurred'),
    'add-success-text' => t('Added to checklist'),
    'remove-text' => t('Remove from checklist'),
    'remove-error-text' => t('An error occurred'),
    'remove-success-text' => t('Removed from checklist'),
      // Obviously we cannot login via google.com.
      // This needs to be corrected with proper a proper url when known.
    'login-url' => 'http://google.com',
  ];

  return [ding_react_app('checklist-material-button', $data)];
}

/**
 * Return render array for an app.
 *
 * @param string $name
 *   Name of the app.
 * @param array $data
 *   Data for the app.
 *
 * @return array
 *   The app render array.
 */
function ding_react_app($name, array $data = []) {
  $attributes = [];

  $attributes['data-ddb-app'] = $name;

  foreach ($data as $prop => $value) {
    $attributes['data-' . $prop] = $value;
  }

  $build = [
    '#type' => 'html_tag',
    '#tag' => 'div',
    '#attributes' => $attributes,
    // Supply an empty string so we don't create a self closing element.
    '#value' => '',
    '#attached' => [
      'library' => [
        'ddb_react_demo_mk6/demo',
        sprintf('ddb_react_demo_mk6/%s', $name),
      ],
    ],
  ];

  return $build;
}

/**
 * Returns the url to the instance of the Material List service to use.
 *
 * @return string
 *   Url to Material List service instance.
 */
function ding_react_material_list_url() {
  return DDB_REACT_DEMO_MK6_MATERIAL_LIST_URL;
}

/**
 * Returns the url to the instance of the Follow Searches service to use.
 *
 * @return string
 *   Url to Follow Searches service instance.
 */
function ding_react_follow_searches_url() {
  return DDB_REACT_DEMO_MK6_FOLLOW_SEARCHES_URL;
}

/**
 * Returns the url to the instance of the Cover service to use.
 *
 * @return string
 *   Url to Cover service instance.
 */
function ding_react_cover_service_url() {
  return DDB_REACT_DEMO_MK6_COVER_SERVICE_URL;
}
