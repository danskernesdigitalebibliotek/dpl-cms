directive @fallback on ENUM_VALUE

"""Complexity directive to evaluate query complexity """
directive @complexity(value: Int!, multipliers: [String!]) on FIELD_DEFINITION

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type AccessType {
  display: String!
  code: AccessTypeCodeEnum!
}

enum AccessTypeCodeEnum {
  PHYSICAL
  ONLINE
  UNKNOWN
}

union AccessUnion = AccessUrl | Ereol | InterLibraryLoan | InfomediaService | DigitalArticleService

type AccessUrl {
  """
  The origin, e.g. "DBC Webarkiv"
  """
  origin: String!

  """Description/type of URL"""
  urlText: String

  """The url where manifestation is located"""
  url: String!

  """Notes for the resource"""
  note: String

  """If the resource requires login"""
  loginRequired: Boolean!

  """The type of content that can be found at this URL"""
  type: AccessUrlTypeEnum

  """Status from linkcheck"""
  status: LinkStatusEnum!
}

enum AccessUrlTypeEnum {
  IMAGE
  OTHER
  RESOURCE
  SAMPLE
  TABLE_OF_CONTENTS
  THUMBNAIL
}

type Audience {
  """Appropriate audience for this manifestation"""
  generalAudience: [String!]!

  """
  Range of numbers with either beginning of range or end of range or both e.g. 6-10, 1980-1999
  """
  ages: [Range!]!

  """Appropriate audience as recommended by the library"""
  libraryRecommendation: String

  """
  Level of difficulty, illustrations, length, and realism in children's literature
  """
  levelForChildren8to12: LevelForAudience

  """Is this material for children or adults"""
  childrenOrAdults: [ChildOrAdult!]!

  """
  Is this material for use in schools (folkeskole/ungdomsuddannelse) or is this
  material for use in schools by the teacher (folkeskole only)
  """
  schoolUse: [SchoolUse!]!

  """Primary target audience for this manifestation"""
  primaryTarget: [String!]!

  """
  LET number of this manifestion, defines the reability level, LET stands for læseegnethedstal
  """
  let: String

  """
  Lix number of this manifestion, defines the reability level, Lix stands for læsbarhedsindex
  """
  lix: String

  """Number of players in the game."""
  players: Players

  """PEGI age rating for games """
  PEGI: PEGI @deprecated(reason: "Use 'Audience.pegi' instead expires: 01\/06-2025")

  """PEGI age rating for games """
  pegi: PEGI

  """Media council age recommendation"""
  mediaCouncilAgeRestriction: MediaCouncilAgeRestriction
}

type CatalogueCodes {
  """CatalogueCodes from the national registers"""
  nationalBibliography: [String!]!

  """
  CatalogueCodes from local bibliographies or catalogues that the manifestation belongs to
  """
  otherCatalogues: [String!]!
}

type CataloguedPublicationStatus {
  """The code representing the catalogued publication status."""
  code: CataloguedPublicationStatusEnum!

  """The display text corresponding to the publication status code."""
  display: String!
}

"""Represents the publication status of a catalogued manifestation."""
enum CataloguedPublicationStatusEnum {
  """New title"""
  NT

  """New edition"""
  NU

  """New print run"""
  OP
}

type ChildOrAdult {
  display: String!
  code: ChildOrAdultCodeEnum!
}

enum ChildOrAdultCodeEnum {
  FOR_CHILDREN
  FOR_ADULTS
}

type Classification {
  """The classification code"""
  code: String!

  """The dk5Heading for the classification (DK5 only)"""
  dk5Heading: String

  """Descriptive text for the classification code (DK5 only)"""
  display: String!

  """
  For DK5 only. The DK5 entry type: main entry, national entry, or additional entry
  """
  entryType: EntryTypeEnum

  """Name of the classification system"""
  system: String!
}

"""The complete facet in response"""
type ComplexSearchFacetResponse {
  name: String
  values: [ComplexSearchFacetValue!]
}

"""A Facet value in response"""
type ComplexSearchFacetValue {
  key: String!
  score: Int!
  traceId: String
}

"""The supported facet fields"""
enum ComplexSearchFacetsEnum {
  AGES
  CATALOGUECODE
  CONTRIBUTOR
  CONTRIBUTORFUNCTION
  CREATOR
  CREATORCONTRIBUTOR
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  FICTIONALCHARACTER
  FILMNATIONALITY
  GAMEPLATFORM
  GENERALAUDIENCE
  GENERALMATERIALTYPE
  GENREANDFORM
  ISSUE
  LANGUAGE
  LIBRARYRECOMMENDATION
  MAINLANGUAGE
  MUSICALENSEMBLEORCAST
  PLAYERS
  PRIMARYTARGET
  SPECIFICMATERIALTYPE
  SPOKENLANGUAGE
  SUBTITLELANGUAGE
  TYPEOFSCORE
  SUBJECT
  HOSTPUBLICATION
  SERIES
  MEDIACOUNCILAGERESTRICTION
  ACCESSTYPE
  MOOD
  NARRATIVETECHNIQUE
  PEGI
  SETTING
  LIX
  LET
  PUBLICATIONYEAR
  SOURCE
  INSTRUMENT
  CHOIRTYPE
  CHAMBERMUSICTYPE
}

"""The facets to ask for"""
input ComplexSearchFacetsInput {
  facetLimit: Int!
  facets: [ComplexSearchFacetsEnum!]
}

"""Search Filters"""
input ComplexSearchFiltersInput {
  """BranchId. """
  branchId: [String!]

  """Overall location in library (eg. Voksne)."""
  department: [String!]

  """Where is the book physically located  (eg. skønlitteratur)."""
  location: [String!]

  """More specific location (eg. Fantasy)."""
  sublocation: [String!]

  """Onloan or OnShelf."""
  status: [HoldingsStatusEnum!]

  """Id of agency."""
  agencyId: [String!]

  """Name of the branch."""
  branch: [String!]

  """Local id of the item."""
  itemId: [String!]

  """Id of publishing issue."""
  issueId: [String!]

  """Date of first accession"""
  firstAccessionDate: String
}

type ComplexSearchIndex {
  """The name of a Complex Search index"""
  index: String!

  """Can be used for searching"""
  search: Boolean!

  """Can be used for faceting"""
  facet: Boolean!

  """Can be used for sorting"""
  sort: Boolean!

  """Aliases for this index"""
  aliases: [String!]
}

"""The search response"""
type ComplexSearchResponse {
  """Total number of works found. May be used for pagination."""
  hitcount: Int!

  """Facets for this response"""
  facets: [ComplexSearchFacetResponse!]

  """
  The works matching the given search query. Use offset and limit for pagination.
  """
  works(offset: Int!, limit: PaginationLimitScalar!, sort: [SortInput!]): [Work!]!

  """Error message, for instance if CQL is invalid"""
  errorMessage: String
}

type ComplexSearchSuggestion {
  """
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  """
  traceId: String!

  """The type of suggestion"""
  type: String!

  """The suggested term which can be searched for"""
  term: String!

  """A work related to the term"""
  work: Work
}

type ComplexSuggestResponse {
  result: [ComplexSearchSuggestion!]!
}

enum ComplexSuggestionTypeEnum {
  HOSTPUBLICATION
  CONTRIBUTORFUNCTION
  CREATOR
  DEFAULT
  CREATORCONTRIBUTORFUNCTION
  CREATORFUNCTION
  SUBJECT
  FICTIONALCHARACTER
  TITLE
  CREATORCONTRIBUTOR
  SERIES
  PUBLISHER
}

type Complexity {
  value: Int!
  max: Int!
  class: String!
}

type ContentEntry {
  """Top level title of the entry"""
  title: ContentEntryTitle!

  """
  Main creator(s) of the entry i.e. composer (classical music), artist/band
  (rhythmic music), author (fiction, articles). For music and sheet music always
  only 1 creator, for articles and fiction possibly more than 1
  """
  creators: ContentEntryCreators

  """
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.), quoted
  as strings (including possible author's statement) from the record
  """
  contributors: [String!]

  """Playing time for music tracks, quoted from the record"""
  playingTime: String

  """
  Possible entry data (title, creators, contributors, playingtime) subordinate to the entry's top level
  """
  sublevel: [ContentSublevel!]
}

type ContentEntryCreators {
  """Details about a person, name, role etc."""
  persons: [Person!]

  """Details about a corporation or conference, name, role, etc."""
  corporations: [Corporation!]
}

type ContentEntryTitle {
  """Title of the content entry"""
  display: String!
}

type ContentSublevel {
  """Title subordinate to the title in the entry's top level"""
  title: ContentEntryTitle!

  """
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related
  to the title on sublevel 1, quoted as strings (including possible author's
  statement) from the record
  """
  contributors: [String!]

  """Playing time for music tracks"""
  playingTime: String

  """
  Possible entry data (title, contributors, playingtime) subordinate to the entry's sublevel 1
  """
  sublevel: [ContentSublevelLast!]
}

type ContentSublevelLast {
  """Title subordinate to the title in the entry's top level"""
  title: ContentEntryTitle!

  """
  Additional 'authors' (lyricists, arrangers, performers/soloists etc.) related
  to the title on sublevel 1, quoted as strings (including possible author's
  statement) from the record
  """
  contributors: [String!]

  """Playing time for music tracks"""
  playingTime: String
}

type ContentsEntity {
  """Heading for the contents of this entity"""
  heading: String!

  """
  ENUM for type of content entries (music tracks, articles, fiction etc.) in this entity
  """
  type: ContentsEntityEnum!

  """
  Contents text note quoted as it is from the marc field. Used for
  non-machine-decipherable content notes (un)formatted in only 1 subfield)
  """
  raw: String

  """
  Content entry with title and possible creator(s), contributors and (for some music and movies) playing time
  """
  entries: [ContentEntry!]
}

enum ContentsEntityEnum {
  ARTICLES
  CHAPTERS
  FICTION
  MUSIC_TRACKS
  SHEET_MUSIC
  NOT_SPECIFIED
}

input CopyRequestInput {
  """The pid of an article or periodica"""
  pid: String!
  userName: String
  userMail: String
  publicationTitle: String
  publicationDateOfComponent: String
  publicationYearOfComponent: String
  volumeOfComponent: String
  authorOfComponent: String
  titleOfComponent: String
  pagesOfComponent: String
  userInterestDate: String
  pickUpAgencySubdivision: String
  issueOfComponent: String
  openURL: String
}

type CopyRequestResponse {
  status: CopyRequestStatusEnum!
}

enum CopyRequestStatusEnum {
  OK
  ERROR_UNAUTHENTICATED_USER
  ERROR_AGENCY_NOT_SUBSCRIBED
  ERROR_INVALID_PICKUP_BRANCH
  ERROR_PID_NOT_RESERVABLE
  ERROR_MISSING_CLIENT_CONFIGURATION
  ERROR_MUNICIPALITYAGENCYID_NOT_FOUND
  ERROR_MISSING_MUNICIPALITYAGENCYID
  UNKNOWN_USER
  BORCHK_USER_BLOCKED_BY_AGENCY
  BORCHK_USER_NO_LONGER_EXIST_ON_AGENCY
  BORCHK_USER_NOT_VERIFIED
  INTERNAL_ERROR
}

type Corporation implements SubjectInterface & CreatorInterface {
  """The full corporation or conference name"""
  display: String!

  """The full corporation or conference name to sort after"""
  nameSort: String!

  """Main corporation or conference"""
  main: String

  """Sub corporation or conference/meeting"""
  sub: String

  """
  Location or jurisdiction of the corporation or conference, like Københavns Kommune, Statistisk Kontor
  """
  location: String

  """Year of the conference"""
  year: String

  """Number of the conference"""
  number: String

  """
  Added information about the corporation, like M. Folmer Andersen (firma)
  """
  attributeToName: String

  """
  A list of which kinds of contributions this corporation made to this creation
  """
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

type Cover {
  detail_117: String
  detail_207: String
  detail_42: String
  detail_500: String
  thumbnail: String
  detail: String
  origin: String
  xSmall: CoverDetails
  small: CoverDetails
  medium: CoverDetails
  large: CoverDetails
}

type CoverDetails {
  url: String
  width: Int
  height: Int
}

interface CreatorInterface {
  """Name of the creator"""
  display: String!

  """Name of the creator which can be used to sort after """
  nameSort: String!

  """
  A list of which kinds of contributions this creator made to this creation
  """
  roles: [Role!]!
}

type DK5MainEntry {
  """Displayable main DK5 classification"""
  display: String!

  """Main DK5 classification code"""
  code: String!

  """The dk5Heading for the classification"""
  dk5Heading: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian
"""
scalar DateTime

type Debug {
  complexity: Complexity!
  depth: Depth!
}

type Depth {
  value: Int!
  max: Int!
}

type DidYouMean {
  """
  A unique identifier for tracking user interactions with this didYouMean value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  """
  traceId: String!

  """An alternative query"""
  query: String!

  """A probability score between 0-1 indicating how relevant the query is"""
  score: Float!
}

type DigitalArticleService {
  """
  Issn which can be used to order article through Digital Article Service
  """
  issn: String!
}

type Edition {
  """
  Properties 'edition', 'contributorsToEdition' and 'publicationYear' as one
  string, e.g.: '3. udgave, revideret af Hugin Eide, 2005'
  """
  summary: String!

  """A note about this specific edition"""
  note: String

  """The edition number and name"""
  edition: String

  """Quotation of contributor statements related to the edition"""
  contributors: [String!]!

  """A year as displayable text and as number"""
  publicationYear: PublicationYear
}

type ElbaServices {
  placeCopyRequest(
    input: CopyRequestInput!

    """
    If this is true, the copy request will not be send to the elba service
    Use it for testing
    """
    dryRun: Boolean
  ): CopyRequestResponse!
}

enum EntryTypeEnum {
  ADDITIONAL_ENTRY
  MAIN_ENTRY
  NATIONAL_BIBLIOGRAPHY_ENTRY
  NATIONAL_BIBLIOGRAPHY_ADDITIONAL_ENTRY
}

type Ereol {
  """
  The origin, e.g. "Ereolen" or "Ereolen Go"
  """
  origin: String!

  """The url where manifestation is located"""
  url: String!

  """
  Is this a manifestation that always can be loaned on ereolen.dk even if you've run out of loans this month
  """
  canAlwaysBeLoaned: Boolean!

  """Notes for the resource"""
  note: String
}

"""The supported facet fields"""
enum FacetFieldEnum {
  WORKTYPES
  MAINLANGUAGES
  MATERIALTYPESGENERAL
  MATERIALTYPESSPECIFIC
  FICTIONALCHARACTERS
  GENREANDFORM
  CHILDRENORADULTS
  ACCESSTYPES
  FICTIONNONFICTION
  SUBJECTS
  CREATORS
  CANALWAYSBELOANED
  YEAR
  DK5
  AGE
  LIX
  LET
  GENERALAUDIENCE
  LIBRARYRECOMMENDATION
  GAMEPLATFORM
}

"""The result for a specific facet"""
type FacetResult {
  """The name of the facet."""
  name: String!

  """The enum type of the facet."""
  type: FacetFieldEnum!

  """The values of thie facet result"""
  values(limit: Int!): [FacetValue!]!
}

"""A facet value consists of a term and a count."""
type FacetValue {
  """Use the key when applying filters"""
  key: String!

  """A value of a facet field"""
  term: String!

  """A score indicating relevance"""
  score: Int

  """
  A unique identifier for tracking user interactions with this facet value. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  """
  traceId: String!
}

type FictionNonfiction {
  """
  Displayable overall category/genre. In Danish skønlitteratur/faglitteratur
  for literature, fiktion/nonfiktion for other types.
  """
  display: String!

  """Binary code fiction/nonfiction used for filtering"""
  code: FictionNonfictionCodeEnum!
}

enum FictionNonfictionCodeEnum {
  FICTION
  NONFICTION
  NOT_SPECIFIED
}

type GeneralMaterialType {
  """
  code for materialType # @TODO - is this a finite list ?? - and where to get it
  """
  code: GeneralMaterialTypeCodeEnum!

  """Ths string to display"""
  display: String!
}

enum GeneralMaterialTypeCodeEnum {
  ARTICLES
  AUDIO_BOOKS
  BOARD_GAMES
  BOOKS
  COMICS
  COMPUTER_GAMES
  EBOOKS
  FILMS
  IMAGE_MATERIALS
  MUSIC
  NEWSPAPER_JOURNALS
  OTHER
  PODCASTS
  SHEET_MUSIC
  TV_SERIES
}

enum HoldingsStatusEnum {
  """Holding is physically available at the branch"""
  ONSHELF

  """Holding is on loan"""
  ONLOAN
}

type HostPublication {
  """Publication this manifestation can be found in"""
  title: String!

  """Creator of the host publication if host publication is book"""
  creator: String

  """Edition statement for the host publication"""
  edition: String

  """ISSN of the publication this manifestation can be found in"""
  issn: String

  """ISBN of the publication this manifestation can be found in"""
  isbn: String

  """The issue of the publication this manifestation can be found in"""
  issue: String

  """Notes about the publication where this manifestation can be found in"""
  notes: [String!]

  """The pages in the publication where this manifestation can be found in"""
  pages: String

  """
  The publisher of the publication where this manifestation can be found in
  """
  publisher: String

  """Series of the publication this manifestation can be found in"""
  series: Series

  """
  The publication year of the publication this manifestation can be found in
  """
  year: PublicationYear

  """All details about the publication this manifestation can be found in"""
  summary: String!
}

type Identifier {
  """The type of identifier"""
  type: IdentifierTypeEnum!

  """The actual identifier"""
  value: String!
}

enum IdentifierTypeEnum {
  UPC
  URI
  DOI
  ISBN
  ISSN
  ISMN
  MUSIC
  MOVIE
  PUBLIZON
  NOT_SPECIFIED
  ORDER_NUMBER
  BARCODE
}

type InfomediaArticle {
  id: String!
  headLine: String
  subHeadLine: String
  byLine: String
  dateLine: String
  paper: String
  text: String
  hedLine: String
  logo: String
  html: String
}

enum InfomediaErrorEnum {
  SERVICE_NOT_LICENSED
  SERVICE_UNAVAILABLE
  LIBRARY_NOT_FOUND
  ERROR_IN_REQUEST
  BORROWER_NOT_LOGGED_IN
  BORROWER_NOT_FOUND
  BORROWERCHECK_NOT_ALLOWED
  INTERNAL_SERVER_ERROR
  BORROWER_NOT_IN_MUNICIPALITY
  NO_AGENCYID
}

type InfomediaResponse {
  """Infomedia error"""
  error: InfomediaErrorEnum
  article: InfomediaArticle
}

type InfomediaService {
  """
  Infomedia ID which can be used to fetch article through Infomedia Service
  """
  id: String!
}

type InterLibraryLoan {
  """Is true when manifestation can be borrowed via ill"""
  loanIsPossible: Boolean!

  """Is newly added - nice to know if there are no localizations"""
  accessNew: Boolean!
}

input KidRecommenderTagsInput {
  tag: String
  weight: Int
}

type Language {
  """Language as displayable text"""
  display: String!

  """ISO639-2 language code"""
  isoCode: String!

  """ISO639-1 language code (2 letters)"""
  iso639Set1: String!

  """ISO639-2 language code (3 letters)"""
  iso639Set2: String!
}

enum LanguageCodeEnum {
  DA
  EN
}

type Languages {
  """
  Notes of the languages that describe subtitles, spoken/written (original,
  dubbed/synchonized), visual interpretation, parallel (notes are written in
  """
  notes: [String!]

  """Main language of this manifestation"""
  main: [Language!]

  """Original language of this manifestation"""
  original: [Language!]

  """
  Parallel languages of this manifestation, if more languages are printed in the same book
  """
  parallel: [Language!]

  """
  Spoken language in this manifestation e.g. dubbed/syncronized language in movie
  """
  spoken: [Language!]

  """Subtitles in this manifestation"""
  subtitles: [Language!]

  """
  Summary/abstract languages of this manifestation, if the manifestation
  contains short summaries of the content in another language
  """
  abstract: [Language!]
}

type LevelForAudience {
  """Level expressed as integer on a scale from 1 to 5"""
  difficulty: Int

  """Level expressed as integer on a scale from 1 to 5"""
  illustrationsLevel: Int

  """Level expressed as integer on a scale from 1 to 5"""
  length: Int

  """Level expressed as integer on a scale from 1 to 5"""
  realisticVsFictional: Int
}

type LinkCheckResponse {
  url: String!
  status: LinkCheckStatusEnum!
  lastCheckedAt: DateTime
  brokenSince: DateTime
}

type LinkCheckService {
  checks(urls: [String!]): [LinkCheckResponse!]!
}

enum LinkCheckStatusEnum {
  OK
  BROKEN
  INVALID
  GONE
}

enum LinkStatusEnum {
  BROKEN
  GONE
  INVALID
  OK
}

type LocalSuggestResponse {
  result: [Suggestion!]!
}

type Manifestation {
  """
  A unique identifier for tracking user interactions with this manifestation. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  """
  traceId: String!

  """Unique identification of the manifestation e.g 870970-basis:54029519"""
  pid: String!

  """Different kinds of titles for this work"""
  titles: ManifestationTitles!

  """Abstract of the entity"""
  abstract: [String!]!

  """Access type of this manifestation"""
  accessTypes: [AccessType!]!

  """Different options to access manifestation"""
  access: [AccessUnion!]!

  """
  Different kinds of definitions of appropriate audience for this manifestation
  """
  audience: Audience

  """
  CatalogueCodes divided in codes from the national bibliography and other codes
  """
  catalogueCodes: CatalogueCodes!

  """
  Classification codes for this manifestation from any classification system
  """
  classifications: [Classification!]!

  """Contributors to the manifestation, actors, illustrators etc"""
  contributors: [CreatorInterface!]!

  """
  Additional contributors of this manifestation as described on the publication. E.g. 'på dansk ved Vivi Berendt'
  """
  contributorsFromDescription: [String!]!

  """Cover for this manifestation"""
  cover: Cover!

  """
  Primary creators of the manifestation e.g. authors, directors, musicians etc
  """
  creators: [CreatorInterface!]!

  """
  Additional creators of this manifestation as described on the publication. E.g. 'tekst af William Warren'
  """
  creatorsFromDescription: [String!]!

  """The year for the publication of the first edition for this work """
  dateFirstEdition: PublicationYear

  """Edition details for this manifestation"""
  edition: Edition

  """Details about the latest printing of this manifestation"""
  latestPrinting: Printing

  """
  Overall literary category/genre of this manifestation. e.g. fiction or
  nonfiction. In Danish skønlitteratur/faglitteratur for literature,
  fiktion/nonfiktion for other types.
  """
  fictionNonfiction: FictionNonfiction

  """The genre, (literary) form, type etc. of this manifestation"""
  genreAndForm: [String!]!

  """Details about the host publications of this manifestation"""
  hostPublication: HostPublication

  """Identifiers for this manifestation - often used for search indexes"""
  identifiers: [Identifier!]!

  """Languages in this manifestation"""
  languages: Languages

  """
  Tracks on music album, sheet music content, or articles/short stories etc. in this manifestation
  """
  manifestationParts: ManifestationParts @deprecated(reason: "Use 'Manifestation.contents' instead expires: 01\/11-2025")

  """
  Content title entries with possible creators, contributors and playing time
  for music tracks, sheet music titles, articles, poems, short stories etc.
  """
  contents: [ContentsEntity!]

  """The type of material of the manifestation based on bibliotek.dk types"""
  materialTypes: [MaterialType!]!

  """Notes about the manifestation"""
  notes: [Note!]!

  """The work that this manifestation is part of"""
  ownerWork: Work!

  """
  Notes about relations to this book/periodical/journal, - like previous names or related journals
  """
  relatedPublications: [RelatedPublication!]!

  """
  Physical description  of this manifestation like extent (pages/minutes), illustrations etc.
  """
  physicalDescription: PhysicalUnitDescription

  """Publisher of this manifestion"""
  publisher: [String!]!

  """
  The creation date of the record describing this manifestation in the format YYYYMMDD
  """
  recordCreationDate: String!

  """Series for this manifestation"""
  series: [Series!]!

  """Universes for this manifestation"""
  universes: [Universe!]!

  """
  Information about on which shelf in the library this manifestation can be found
  """
  shelfmark: Shelfmark

  """
  The source of the manifestation, e.g. own library catalogue
  (Bibliotekskatalog) or online source e.g. Filmstriben, Ebook Central, eReolen
  """
  source: [String!]!

  """Subjects for this manifestation"""
  subjects: SubjectContainer!

  """
  Information about on which volume this manifestation is in multi volume work
  """
  volume: String

  """
  Quotation of the manifestation's table of contents or a similar content list
  """
  tableOfContents: TableOfContent @deprecated(reason: "Use 'Manifestation.contents' instead expires: 01\/11-2025")

  """Worktypes for this manifestations work"""
  workTypes: [WorkTypeEnum!]!

  """The year this manifestation was originally published or produced"""
  workYear: PublicationYear

  """id of the manifestaion unit"""
  unit: Unit

  """Identification of the local id of this manifestation"""
  localId: String

  """Material that can be identified as sheet music"""
  sheetMusicCategories: SheetMusicCategory

  """The publication status of a catalogued manifestation."""
  cataloguedPublicationStatus: CataloguedPublicationStatus

  """Field for presenting bibliographic records in MARC format"""
  marc: MarcRecord

  """Relations to other manifestations"""
  relations: Relations!

  """Some review data, if this manifestation is a review"""
  review: ManifestationReview
}

type ManifestationPart {
  """The title of the entry (music track or title of a literary analysis)"""
  title: String!

  """The creator of the music track or literary analysis"""
  creators: [CreatorInterface!]!

  """Classification of this entry (music track or literary analysis)"""
  classifications: [Classification!]!

  """Subjects of this entry (music track or literary analysis)"""
  subjects: [SubjectInterface!]

  """
  Additional creator or contributor to this entry (music track or literary
  analysis) as described on the publication. E.g. 'arr.: H. Cornell'
  """
  creatorsFromDescription: [String!]!

  """Contributors from description - additional contributor to this entry"""
  contributorsFromDescription: [String!]!

  """
  The playing time for this specific part (i.e. the duration of a music track) 
  """
  playingTime: String
}

enum ManifestationPartTypeEnum {
  MUSIC_TRACKS
  SHEET_MUSIC_CONTENT
  PARTS_OF_BOOK
  NOT_SPECIFIED
}

type ManifestationParts {
  """Heading for the music content note"""
  heading: String

  """The creator and title etc of the individual parts"""
  parts: [ManifestationPart!]!

  """
  The type of manifestation parts, is this music tracks, book parts etc.
  """
  type: ManifestationPartTypeEnum!
}

type ManifestationReview {
  rating: String
  reviewByLibrarians: [ReviewElement]
}

type ManifestationTitles {
  """The main title(s) of the work"""
  main: [String!]!

  """The full title(s) of the manifestation including subtitles etc"""
  full: [String!]!

  """The sorted title of the entity"""
  sort: String!

  """
  Alternative titles for this manifestation e.g. a title in a different language
  """
  alternative: [String!]!

  """
  Information that distinguishes this manifestation from a similar manifestation
  with same title, e.g. 'illustrated by Ted Kirby'
  """
  identifyingAddition: String

  """
  The title of the work that this expression/manifestation is translated from or
  based on. The original title(s) of a film which has a different distribution
  """
  original: [String!]

  """
  Titles (in other languages) parallel to the main 'title' of the manifestation
  """
  parallel: [String!]!

  """The standard title of the entity, used for music and movies"""
  standard: String

  """
  The title of the entity with the language of the entity in parenthesis after.
  This field is only generated for non-danish titles.
  """
  titlePlusLanguage: String

  """Danish translation of the main title"""
  translated: [String!]

  """detailed title for tv series """
  tvSeries: TvSeries
}

type Manifestations {
  first: Manifestation!
  latest: Manifestation!
  all: [Manifestation!]!
  bestRepresentation: Manifestation!
  bestRepresentations: [Manifestation!]!
  mostRelevant: [Manifestation!]!

  """
  A list of manifestations that matched the search query.
  
  This field is populated only when a work is retrieved within a search context.
  Each entry is a SearchHit object representing a manifestation that matched the search criteria.
  Only one manifestation per unit is returned.
  """
  searchHits: [SearchHit!]
}

type MarcRecord {
  """The marc record identifier"""
  id: String!

  """The library agency"""
  agencyId: String!

  """The bibliographic record identifier"""
  bibliographicRecordId: String!

  """The MARC record collection content as marcXchange XML string"""
  content: String!

  """
  The serialization format of the MARC record content. Defaults to 'marcXchange'
  """
  contentSerializationFormat: String!

  """Flag indicating whether or not the record is deleted"""
  deleted: Boolean!
}

type MaterialType {
  """jed 1.1 - the general materialtype"""
  materialTypeGeneral: GeneralMaterialType!

  """jed 1.1 - the specific materialtType"""
  materialTypeSpecific: SpecificMaterialType!
}

type MediaCouncilAgeRestriction {
  """Minimum age"""
  minimumAge: Int

  """Display string for minimum age"""
  display: String
}

type Mood implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

input MoodKidsRecommendFiltersInput {
  difficulty: [Int!]
  illustrationsLevel: [Int!]
  length: [Int!]
  realisticVsFictional: [Int!]
  fictionNonfiction: FictionNonfictionCodeEnum
}

type MoodQueries {
  moodSearch(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchResponse!
  moodSearchKids(q: String!, field: MoodSearchFieldValuesEnum, offset: Int, limit: Int): MoodSearchKidsResponse!
  moodSuggest(q: String!, limit: Int): MoodSuggestResponse!
  moodTagRecommend(tags: [String!]!, limit: Int, plus: [String!], minus: [String!], hasCover: Boolean): [MoodTagRecommendResponse]!
  moodWorkRecommend(likes: [String!]!, dislikes: [String!], limit: Int, offset: Int, maxAuthorRecommendations: Int, threshold: Float, hasCover: Boolean): [MoodTagRecommendResponse]!
  moodRecommendKids(tags: [KidRecommenderTagsInput!], work: String, filters: MoodKidsRecommendFiltersInput, dislikes: [String!], offset: Int, limit: Int): MoodRecommendKidsResponse!
}

"""The reponse from moodrecommenkids"""
type MoodRecommendKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

"""Supported fields for moodsearch request"""
enum MoodSearchFieldValuesEnum {
  ALL
  TITLE
  CREATOR
  MOODTAGS
  ALLTAGS
}

"""The reponse from moodsearchkids"""
type MoodSearchKidsResponse {
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

"""The response from moodsearch"""
type MoodSearchResponse {
  """
  The works matching the given search query. Use offset and limit for pagination.
  """
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!
}

"""Type of moodSuggest response"""
enum MoodSuggestEnum {
  TITLE
  CREATOR
  TAG
}

"""MoodSuggest item"""
type MoodSuggestItem {
  """
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this manifestation is selected.
  """
  traceId: String!

  """Suggestion"""
  term: String!

  """The type of suggestion title/creator/tag"""
  type: MoodSuggestEnum!

  """A work associated with the suggestion"""
  work: Work
}

"""The response type for moodSuggest"""
type MoodSuggestResponse {
  """Response is an array of MoodSuggestResponse"""
  response: [MoodSuggestItem!]!
}

"""Response type for moodTagRecommend"""
type MoodTagRecommendResponse {
  work: Work!
  similarity: Float
}

type Mutation {
  elba: ElbaServices!
}

type NarrativeTechnique implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type Note {
  """
  The type of note - e.g. note about language, genre etc, NOT_SPECIFIED if not known. 
  """
  type: NoteTypeEnum!

  """Heading before note"""
  heading: String

  """The actual notes"""
  display: [String!]!

  """A link and possible link text"""
  urls: [AccessUrl]
}

enum NoteTypeEnum {
  CONNECTION_TO_OTHER_WORKS
  DESCRIPTION_OF_MATERIAL
  DISSERTATION
  MUSICAL_ENSEMBLE_OR_CAST
  NOT_SPECIFIED
  OCCASION_FOR_PUBLICATION
  ORIGINAL_TITLE
  ORIGINAL_VERSION
  REFERENCES
  RESTRICTIONS_ON_USE
  TYPE_OF_SCORE
  FREQUENCY
  EDITION
  TECHNICAL_REQUIREMENTS
  ESTIMATED_PLAYING_TIME_FOR_GAMES
  EXPECTED_PUBLICATION_DATE
  WITHDRAWN_PUBLICATION
  CONTAINS_AI_GENERATED_CONTENT
}

type PEGI {
  """Minimum age to play the game. PEGI rating"""
  minimumAge: Int

  """Display string for PEGI minimum age"""
  display: String
}

"""An integer in the range from 1 to 100"""
scalar PaginationLimitScalar

type Person implements SubjectInterface & CreatorInterface {
  """The person's whole name in normal order"""
  display: String!

  """The person's full name inverted"""
  nameSort: String!

  """First name of the person"""
  firstName: String

  """Last name of the person"""
  lastName: String

  """Birth year of the person"""
  birthYear: String

  """A roman numeral added to the person, like Christian IV"""
  romanNumeral: String

  """Added information about the person, like Henri, konge af Frankrig"""
  attributeToName: String

  """Creator aliases, creators behind used pseudonym"""
  aliases: [Person!]!

  """
  A list of which kinds of contributions this person made to this creation
  """
  roles: [Role!]!
  type: SubjectTypeEnum!
  language: Language
  local: Boolean
}

type PhysicalUnitDescription {
  """
  A summary of the physical description of this manifestation like extent (pages/minutes), illustrations etc.
  """
  summaryFull: String

  """List of units contained within the material"""
  materialUnits: [UnitDescription!]

  """Number of pages of the manifestation as number"""
  numberOfPages: Int

  """Material that comes with the manifestation (bilag)"""
  accompanyingMaterial: String
}

type Players {
  """Number of players interval begin."""
  begin: Int

  """Number of players interval end."""
  end: Int

  """Display name for the number of players."""
  display: String
}

type Printing {
  """
  Properties 'printing' and 'publicationYear' as one string, e.g.: '11. oplag, 2020'
  """
  summary: String!

  """The printing number and name"""
  printing: String!

  """
  Publisher of printing when other than the original publisher of the edition (260*b)
  """
  publisher: String

  """A year as displayable text and as number"""
  publicationYear: PublicationYear
}

type PublicationYear {
  display: String!
  year: Int
  endYear: Int
  frequency: String
}

type Query {
  """All indexes in complex search"""
  complexSearchIndexes: [ComplexSearchIndex!]
  debug: Debug
  mood: MoodQueries!

  """Access to various types of recommendations."""
  recommendations: Recommendations!
  manifestation(pid: String, faust: String): Manifestation
  manifestations(faust: [String!], pid: [String!]): [Manifestation]!
  work(id: String, faust: String, pid: String, oclc: String, language: LanguageCodeEnum): Work
  works(id: [String!], faust: [String!], pid: [String!], oclc: [String!], language: LanguageCodeEnum): [Work]!
  search(q: SearchQueryInput!, filters: SearchFiltersInput, search_exact: Boolean): SearchResponse!
  complexSearch(cql: String!, filters: ComplexSearchFiltersInput, facets: ComplexSearchFacetsInput): ComplexSearchResponse!
  linkCheck: LinkCheckService!
  localSuggest(
    """The query to get suggestions from"""
    q: String!

    """suggest type to include in result"""
    suggestType: [SuggestionTypeEnum!]

    """Number of items to return"""
    limit: Int

    """Id of branch to filter by"""
    branchId: String
  ): LocalSuggestResponse!
  complexSuggest(
    """The query to get suggestions for"""
    q: String!

    """the type of index to get suggestions from"""
    type: ComplexSuggestionTypeEnum!
  ): ComplexSuggestResponse!
  suggest(
    workType: WorkTypeEnum

    """The query to get suggestions from"""
    q: String!

    """suggest type to include in result"""
    suggestType: SuggestionTypeEnum

    """suggest types to include in result"""
    suggestTypes: [SuggestionTypeEnum!]

    """Number of items to return"""
    limit: Int
  ): SuggestResponse!

  """Get recommendations"""
  recommend(id: String, pid: String, faust: String, limit: Int, branchId: String): RecommendationResponse!
  infomedia(id: String!): InfomediaResponse!
  refWorks(pids: [String!]!): String!
  ris(pids: [String!]!): String!
  relatedSubjects(q: [String!]!, limit: Int): [String!] @deprecated(reason: "Use 'Recommendations.subjects' instead expires: 01\/03-2025")
  series(seriesId: String!): Series
  universe(key: String, universeId: String): Universe
}

type Range {
  begin: Int
  end: Int
  display: String!
}

type Recommendation {
  """The recommended work"""
  work: Work!

  """The recommended manifestation"""
  manifestation: Manifestation!

  """Info on how this recommendation was generated"""
  reader: [String!]!
}

type RecommendationResponse {
  result: [Recommendation!]!
}

"""Get different kinds of recommendations"""
type Recommendations {
  """
  Retrieve subject-based recommendations based on a list of query strings and an optional limit.
  - q: An array of strings used to generate subject recommendations.
  - limit: The maximum number of recommendations to return.
  """
  subjects(q: [String!]!, limit: Int): [SubjectRecommendation!]
}

type RelatedPublication {
  """
  Notes describing the relation of the related periodical/journal/publication
  """
  heading: String!

  """Title of the related periodical/journal"""
  title: [String!]!

  """Faust of the related publication"""
  faust: String

  """ISSN of the related periodical/journal/publication"""
  issn: String

  """ISBN of the related publication"""
  isbn: String

  """Alle urls of the related publication"""
  urls: [String]!

  """Note regarding the URL of the related publication"""
  urlText: String

  """The first URL of the urls in related publications"""
  url: String
}

type Relations {
  """
  The story of this article is continued in this or these other article(s)
  """
  continuedIn: [Manifestation!]!

  """
  This story of this article actually started in this or these other article(s)
  """
  continues: [Manifestation!]!

  """The contents of this articles is also discussed in these articles"""
  discussedIn: [Manifestation!]!

  """The article discusses the content of these articles"""
  discusses: [Manifestation!]!

  """This story is adapted in this or these movie(s)"""
  hasAdaptation: [Manifestation!]!

  """
  The contents of this manifestation is analysed in these manifestations
  """
  hasAnalysis: [Manifestation!]!

  """
  The creator of this manifestation is portrayed in these manifestations
  """
  hasCreatorDescription: [Manifestation!]!

  """
  The publisher of this manifestation has made a description of the content
  """
  hasDescriptionFromPublisher: [Manifestation!]!

  """This movie is based on this manuscript"""
  hasManuscript: [Manifestation!]!

  """
  This manifestation has a 'materialevurdering' that was originally made for
  another manifestation, but it is still relevant (e.g. book/ebook)
  """
  hasReusedReview: [Manifestation!]!

  """This manifestation has these reviews"""
  hasReview: [Manifestation!]!

  """This movie or game has this sound track"""
  hasSoundtrack: [Manifestation!]!

  """This movie is based on this or these books"""
  isAdaptationOf: [Manifestation!]!

  """This manifestation is an analysis of these manifestations"""
  isAnalysisOf: [Manifestation!]!

  """
  This is a description from the original publisher of these manifestations
  """
  isDescriptionFromPublisherOf: [Manifestation!]!

  """This movie is based on this manuscript"""
  isManuscriptOf: [Manifestation!]!

  """
  This 'materialevurdering' can also be used to review these relevant
  manifestations, even though it was originally made for another publication
  """
  isReusedReviewOf: [Manifestation!]!

  """This manifestation is a review of these manifestations"""
  isReviewOf: [Manifestation!]!

  """This sound track for a game is related to these games"""
  isSoundtrackOfGame: [Manifestation!]!

  """This sound track for a movie is related to these movies"""
  isSoundtrackOfMovie: [Manifestation!]!

  """This album has these tracks"""
  hasTrack: [Manifestation!]!

  """This music track is part of these albums"""
  isPartOfAlbum: [Manifestation!]!

  """This article or book part can be found in these manifestations"""
  isPartOfManifestation: [Manifestation!]!
}

type ReviewElement {
  content: String

  """
  This is a paragraph containing markup where links to manifestations
  can be inserted. For instance '"Axel Steens nye job minder om [870970-basis:20307021] fra ...'.
  Relevant manifestations are located in the manifestations field. 
  """
  contentSubstitute: String
  heading: String

  """
  Manifestations that can be used to generate and insert links into 'contentSubsitute'.
  """
  manifestations: [Manifestation]
  type: ReviewElementTypeEnum
}

enum ReviewElementTypeEnum {
  ABSTRACT
  ACQUISITION_RECOMMENDATIONS
  AUDIENCE
  CONCLUSION
  DESCRIPTION
  EVALUATION
  SIMILAR_MATERIALS
}

type Role {
  """
  The code for the type of creator or contributor, e.g. 'aut' for author, 'ill' for illustrator etc
  """
  functionCode: String!

  """
  The type of creator/contributor as text in singular and plural in Danish, e.g.
  forfatter/forfattere, komponist/komponister etc
  """
  function: Translation!
}

type SchoolUse {
  display: String!
  code: SchoolUseCodeEnum!
}

enum SchoolUseCodeEnum {
  FOR_SCHOOL_USE
  FOR_TEACHER
}

"""Search Filters"""
input SearchFiltersInput {
  accessTypes: [String!]
  childrenOrAdults: [String!]
  creators: [String!]
  fictionNonfiction: [String!]
  fictionalCharacters: [String!]
  genreAndForm: [String!]
  mainLanguages: [String!]
  materialTypesGeneral: [String!]
  materialTypesSpecific: [String!]
  subjects: [String!]
  workTypes: [String!]
  year: [String!]
  dk5: [String!]
  gamePlatform: [String!]
  branchId: [String!]
  department: [String!]
  location: [String!]
  sublocation: [String!]
  status: [HoldingsStatusEnum!]
  canAlwaysBeLoaned: [String!]
  age: [String!]
  ageRange: [String!]
  lixRange: [String!]
  letRange: [String!]
  generalAudience: [String!]
  libraryRecommendation: [String!]
}

"""
A search hit that encapsulates a matched manifestation from a search query.
"""
type SearchHit {
  """The manifestation that was matched during the search."""
  match: Manifestation
}

"""The supported fields to query"""
input SearchQueryInput {
  """
  Search for title, creator, subject or a combination.
  This is typically used where a single search box is desired.
  """
  all: String

  """Search for creator"""
  creator: String

  """Search for specific subject"""
  subject: String

  """Search for specific title"""
  title: String
}

"""The simple search response"""
type SearchResponse {
  """Total number of works found. May be used for pagination."""
  hitcount: Int!

  """
  The works matching the given search query. Use offset and limit for pagination.
  """
  works(offset: Int!, limit: PaginationLimitScalar!): [Work!]!

  """
  Make sure only to fetch this when needed
  This may take seconds to complete
  """
  facets(facets: [FacetFieldEnum!]!): [FacetResult!]!

  """Will return the facets that best match the input query and filters"""
  intelligentFacets(limit: Int): [FacetResult!]!

  """A list of alternative search queries"""
  didYouMean(limit: Int): [DidYouMean!]!
}

type SerieWork {
  """The number of work in the series as a number (as text)"""
  numberInSeries: String

  """Work of a serieWork"""
  work: Work!

  """
  Information about whether this work in the series should be read first
  """
  readThisFirst: Boolean

  """
  Information about whether this work in the series can be read without
  considering the order of the series, it can be read at any time
  """
  readThisWhenever: Boolean
}

type Series {
  """The number of members in the series"""
  hitcount: Int!

  """The title of the series"""
  title: String!

  """Identifier for the series"""
  seriesId: String

  """Traceid for tracking"""
  traceId: String!

  """Additional information """
  identifyingAddition: String

  """Description of the series"""
  description: String

  """A alternative title to the main 'title' of the series"""
  alternativeTitles: [String!]!

  """
  A parallel title to the main 'title' of the series, in a different language
  """
  parallelTitles: [String!]!

  """The number in the series as text qoutation"""
  numberInSeries: String

  """
  Information about whether this work in the series should be read first
  """
  readThisFirst: Boolean

  """
  Information about whether this work in the series can be read without
  considering the order of the series, it can be read at any time
  """
  readThisWhenever: Boolean

  """Whether this is a popular series or general series"""
  isPopular: Boolean

  """WorkTypes for the series"""
  workTypes: [String!]!

  """MainLanguages of the series"""
  mainLanguages: [String!]!

  """Members of this serie. """
  members(limit: Int, offset: Int): [SerieWork!]!
}

type Setting implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

type SheetMusicCategory {
  """The types of instruments material covers"""
  instruments: [String!]!

  """I this node for exercises"""
  forMusicalExercise: Boolean

  """The types of choir material covers"""
  choirTypes: [String!]!

  """The types of chamber music material covers"""
  chamberMusicTypes: [String!]!

  """The types of orchestra material covers"""
  orchestraTypes: [String!]!
}

type Shelfmark {
  """A postfix to the shelfmark, eg. 99.4 Christensen, Inger. f. 1935"""
  postfix: String

  """
  The actual shelfmark - e.g. information about on which shelf in the library this manifestation can be found, e.g. 99.4
  """
  shelfmark: String!
}

input SortInput {
  index: String!
  order: SortOrderEnum!
}

enum SortOrderEnum {
  ASC
  DESC
}

type SpecificMaterialType {
  """code for materialType"""
  code: String!

  """Ths string to display"""
  display: String!
}

type SubjectContainer {
  """All subjects"""
  all: [SubjectInterface!]!

  """Only DBC verified subjects"""
  dbcVerified: [SubjectInterface!]!
}

interface SubjectInterface {
  display: String!

  """
  The type of subject - 'location', 'time period' etc., 'topic' if not specific kind of subject term
  """
  type: SubjectTypeEnum!

  """Language of the subject - contains display and isoCode """
  language: Language
  local: Boolean
}

"""Details about a single subject recommendation."""
type SubjectRecommendation {
  """The recommended subject."""
  subject: String!

  """
  A unique identifier for tracking user interactions with this subject recommendation. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  """
  traceId: String!
}

type SubjectText implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean
}

enum SubjectTypeEnum {
  TOPIC
  LOCATION
  FICTIONAL_CHARACTER
  LAESEKOMPASSET
  MEDICAL_SUBJECT_HEADING
  MUSIC_COUNTRY_OF_ORIGIN
  MUSIC_TIME_PERIOD
  MUSICAL_INSTRUMENTATION
  NATIONAL_AGRICULTURAL_LIBRARY
  TIME_PERIOD
  TITLE
  FILM_NATIONALITY
  LIBRARY_OF_CONGRESS_SUBJECT_HEADING
  FICTIONAL_LOCATION

  """
  added for manifestation.parts.creators/person - they get a type from small-rye
  """
  PERSON
  CORPORATION
  MOOD
  MOOD_CHILDREN

  """Subject describing selected topics for children, and a rating."""
  TOPIC_CHILDREN
  PERSPECTIVE
  STYLE
  TEMPO
  REALITY
  ENVIRONMENT
}

type SubjectWithRating implements SubjectInterface {
  type: SubjectTypeEnum!
  display: String!
  language: Language
  local: Boolean

  """Expressed as integer on a scale from 1 to 5"""
  rating: Int
}

type SuggestResponse {
  result: [Suggestion!]!
}

type Suggestion {
  """
  A unique identifier for tracking user interactions with this suggestion. 
  It is generated in the response and should be included in subsequent
  API calls when this suggestion is selected.
  """
  traceId: String!

  """The type of suggestion: creator, subject or title"""
  type: SuggestionTypeEnum!

  """The suggested term which can be searched for"""
  term: String!

  """A work related to the term"""
  work: Work
}

enum SuggestionTypeEnum {
  SUBJECT
  TITLE
  CREATOR
  COMPOSIT
}

type TableOfContent {
  heading: String
  content: String
  listOfContent: [TableOfContent!]
}

type TimePeriod implements SubjectInterface {
  type: SubjectTypeEnum!
  period: Range!
  display: String!
  language: Language
  local: Boolean
}

type Translation {
  """
  Translation in plural form, e.g. forfattere, komponister, instruktører etc.
  """
  plural: String!

  """Translation in singular form, e.g. forfatter, komponist, instruktør"""
  singular: String!
}

type TvSeries {
  """Title of the tv serie"""
  title: String

  """Dansih translated title of the tv serie"""
  danishLaunchTitle: String

  """Detailed information about the episode"""
  episode: TvSeriesDetails

  """Episode titles"""
  episodeTitles: [String!]

  """Detailed information about the disc"""
  disc: TvSeriesDetails

  """Detailed information about the season"""
  season: TvSeriesDetails

  """Detailed information about the volume"""
  volume: TvSeriesDetails
}

type TvSeriesDetails {
  display: String
  numbers: [Int!]
}

type Unit {
  id: String!
  manifestations: [Manifestation!]!
}

type UnitDescription {
  """
  Assemblance of the data from all the other properties, separated by a comma
  """
  summary: String!

  """Technical formats, e.g. Playstation 4, blu-ray"""
  numberAndType: String

  """
  Number of pages, tab (books, articles etc.) or playingtime (cd, dvd etc.)
  """
  extent: String

  """
  Other physical description, eg. illustrations, color or b/w, mono/stereo, rpm
  """
  additionalDescription: String

  """Size of the material unit"""
  size: String

  """Technical formats, e.g. Playstation 4, blu-ray"""
  technicalInformation: String
}

type Universe {
  """A key that identifies a universe."""
  key: String

  """An id that identifies a universe."""
  universeId: String

  """
  A unique identifier for tracking user interactions with this universe.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  """
  traceId: String!

  """
  Literary/movie universe this work is part of e.g. Wizarding World, Marvel Cinematic Universe
  """
  title: String!

  """A alternative title to the main 'title' of the universe"""
  alternativeTitles: [String!]

  """Description of the universe"""
  description: String

  """All series within the universe"""
  series(limit: Int, offset: Int, workType: WorkTypeEnum): [Series!]!

  """All works within the universe but not in any series"""
  works(limit: Int, offset: Int, workType: WorkTypeEnum): [Work!]!

  """work types that are in this universe"""
  workTypes: [WorkTypeEnum!]!

  """both series and works in a list"""
  content(limit: Int, offset: Int, workType: WorkTypeEnum): UniverseContentResult!
}

type UniverseContentResult {
  hitcount: Int!
  entries: [UniverseContentUnion!]!
}

union UniverseContentUnion = Work | Series

type Work {
  """Field for presenting bibliographic records in MARC format"""
  marc: MarcRecord

  """Relations to other manifestations"""
  relations: Relations!

  """
  A unique identifier for tracking user interactions with this work.
  It is generated in the response and should be included in subsequent
  API calls when this work is selected.
  """
  traceId: String!

  """
  Unique identification of the work based on work-presentation id e.g work-of:870970-basis:54029519
  """
  workId: String!
  titles: WorkTitles!

  """Abstract of the entity"""
  abstract: [String!]

  """Creators"""
  creators: [CreatorInterface!]!

  """DK5 main entry for this work"""
  dk5MainEntry: DK5MainEntry

  """
  Overall literary category/genre of this work. e.g. fiction or nonfiction. In
  Danish skønlitteratur/faglitteratur for literature, fiktion/nonfiktion for
  """
  fictionNonfiction: FictionNonfiction

  """Date of latest publication"""
  latestPublicationDate: String

  """The type of material of the manifestation based on bibliotek.dk types"""
  materialTypes: [MaterialType!]!

  """Series for this work"""
  series: [Series!]!

  """
  Literary/movie universes this work is part of, e.g. Wizarding World, Marvel Universe
  """
  universes: [Universe!]!

  """Subjects for this work"""
  subjects: SubjectContainer!

  """The genre, (literary) form, type etc. of this work"""
  genreAndForm: [String!]!

  """Worktypes for this work - 'none' replaced by 'other'"""
  workTypes: [WorkTypeEnum!]!

  """The year this work was originally published or produced"""
  workYear: PublicationYear

  """The main language(s) of the work's content"""
  mainLanguages: [Language!]!

  """Details about the manifestations of this work"""
  manifestations: Manifestations!
}

type WorkTitles {
  """The main title(s) of the work"""
  main: [String!]!

  """The full title(s) of the work including subtitles etc"""
  full: [String!]!

  """Titles (in other languages) parallel to the main 'title' of the work"""
  parallel: [String!]!

  """The sorted title of the entity"""
  sort: String!

  """
  The title of the work that this expression/manifestation is translated from or
  based on. The original title(s) of a film which has a different distribution
  """
  original: [String!]

  """The standard title of the entity, used for music and movies"""
  standard: String

  """
  The title of the entity with the language of the entity in parenthesis after.
  This field is only generated for non-danish titles.
  """
  titlePlusLanguage: String

  """Danish translation of the main title"""
  translated: [String!]

  """detailed title for tv series """
  tvSeries: TvSeries
}

enum WorkTypeEnum {
  ANALYSIS
  ARTICLE
  BOOKDESCRIPTION
  GAME
  LITERATURE
  MAP
  MOVIE
  MUSIC
  OTHER
  PERIODICA
  PORTRAIT
  REVIEW
  SHEETMUSIC
  TRACK
}
