<?php

/**
 * @file
 * DPL Login module.
 *
 * Handles authentication against Adgangsplatformen.
 */

use DanskernesDigitaleBibliotek\FBS\ApiException;
use DanskernesDigitaleBibliotek\FBS\Model\BlockStatus;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Site\Settings;
use Drupal\dpl_fbs\Patron\BlockedReason;
use Drupal\dpl_login\AccessToken;
use Drupal\dpl_login\DplLoginInterface;
use Drupal\dpl_login\Exception\AccessTokenCreationException;
use Drupal\user\UserInterface;
use function Safe\sprintf as sprintf;

/**
 * Implements hook_openid_connect_userinfo_alter().
 *
 * @param mixed[] $userinfo
 *   User info from external service.
 * @param mixed[] $context
 *   Various openid_connect context. Tokens etc.
 */
function dpl_login_openid_connect_userinfo_alter(array &$userinfo, array $context): void {

  // If we cannot resolve uinque id we cannot continue.
  if (!$id = $userinfo['attributes']['uniqueId'] ?? FALSE) {
    $userinfo = [];
    return;
  }

  $id_hash = crypt($id, Settings::getHashSalt());

  $name = uniqid();
  // Drupal needs an email. We set a unique one to apply to that rule.
  $userinfo['email'] = sprintf('%s@dpl-cms.invalid', $name);
  // Drupal needs a user name. We use the unique id to apply to that rule.
  $userinfo['name'] = $name;
  // openid_connect module needs the sub for creating the auth map.
  $userinfo['sub'] = $id_hash;
}

/**
 * Implements hook_openid_connect_pre_authorize().
 *
 * @param \Drupal\Core\Session\AccountInterface|false $account
 *   User account.
 * @param mixed[] $context
 *   Various openid_connect context. Tokens etc.
 */
function dpl_login_openid_connect_pre_authorize(AccountInterface|FALSE $account, array $context): bool {
  $logger = \Drupal::logger('dpl_login');

  try {
    $token = AccessToken::createFromOpenidConnectContext($context);
  }
  catch (AccessTokenCreationException $e) {
    $logger->error('Authorization blocked. Unable to create access token: @message', [
      '@message' => $e->getMessage(),
    ]);
    return FALSE;
  }

  /** @var \Drupal\dpl_fbs\FbsApiFactory $api_factory */
  $api_factory = \Drupal::service('dpl_fbs.api_factory');
  $api = $api_factory->getPatronApi($token->token);

  try {
    $patron = $api->getPatronInformationByPatronIdV2();
    $patron_block_status = $patron->getPatron()?->getBlockStatus() ?? [];
    $patron_blocked_reasons = array_map(function (BlockStatus $block_status) use ($logger) {
      try {
        return BlockedReason::from($block_status->getBlockedReason());
      }
      catch (UnexpectedValueException $e) {
        $logger->warning('Unable to map blocked reason @reason: @message', [
          '@reason' => $block_status->getBlockedReason(),
          '@message' => $e->getMessage(),
        ]);
        return BlockedReason::UNKNOWN();
      }
    }, $patron_block_status);

    // Only a subset of the blocked reasons should block login.
    $deny_login_reasons = [
      BlockedReason::DECEASED(),
      BlockedReason::ACCOUNT_STOLEN(),
      BlockedReason::BLOCKED_FROM_SELFSERVICE(),
    ];
    $patron_deny_reasons = array_intersect($patron_blocked_reasons, $deny_login_reasons);

    // Return FALSE to block login if the patron block reasons match one or
    // more of the deny reasons. The OpenID Connect module will provide
    // feedback.
    return !(count($patron_deny_reasons) > 0);
  }
  catch (ApiException $e) {
    $logger->error('Authorization blocked. Unable to get patron information: @message', [
      '@message' => $e->getMessage(),
    ]);
    return FALSE;
  }
}

/**
 * Implements hook_openid_connect_post_authorize().
 *
 * @param \Drupal\Core\Session\AccountInterface $account
 *   User account.
 * @param mixed[] $context
 *   Various openid_connect context. Tokens etc.
 */
function dpl_login_openid_connect_post_authorize(AccountInterface $account, array $context): void {
  $access_token = AccessToken::createFromOpenidConnectContext($context);
  /** @var Drupal\dpl_login\UserTokensProvider $token_provider */
  $token_provider = \Drupal::service('dpl_login.user_tokens');
  $token_provider->setAccessToken($access_token);
}

/**
 * Implements hook_openid_connect_userinfo_save().
 *
 * @param \Drupal\user\UserInterface $account
 *   The user account being saved.
 * @param mixed[] $context
 *   Various openid_connect context. Tokens etc.
 *
 *   We are ignoring the function declaration
 *   because PhpStan gives us an iterable error on UserInterface
 *   which we cannot handle for the moment.
 *   @phpstan-ignore-next-line
 */
function dpl_login_openid_connect_userinfo_save(UserInterface $account, array $context): void {
  // If the user is new we attach a role to the user.
  if (!_dpl_login_user_has_been_processed($context)) {
    $account->addRole(DplLoginInterface::ROLE_PATRON);
    $account->save();
  }
}

/**
 * Decide if the user has already been processed.
 *
 * @param mixed[] $openid_connect_context
 *   Various openid_connect context. Tokens etc.
 *
 * @return bool
 *   Yes or no?
 */
function _dpl_login_user_has_been_processed(array $openid_connect_context): bool {
  // If we for some reason do not have the information
  // about the user.
  // Or if we are sure that the user is an already created user
  // then we do not attach any information.
  return !$openid_connect_context['is_new'] ?? FALSE;
}

/**
 * Implements hook_dpl_react_apps_data().
 */
function dpl_login_dpl_react_apps_data(array &$data): void {
  $openid_config = \Drupal::config('openid_connect.settings.adgangsplatformen');

  $data['urls'] += [
    'userinfo' => $openid_config->get('settings')['userinfo_endpoint'] ?? '/',
  ];
}

/**
 * Implements hook_preprocess_html().
 */
function dpl_login_preprocess_html(array &$variables): void {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $variables['head_title'][] = t('Logged in', [], ['context' => 'dpl_login']);
  }
}
