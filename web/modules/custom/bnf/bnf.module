<?php

use Drupal\bnf\BnfStateEnum;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Implements hook_entity_base_field_info().
 *
 * Creating our custom programmatic fields.
 *
 * @return \Drupal\Core\Field\FieldDefinitionInterface[]
 *   The field definitions.
 */
function bnf_entity_base_field_info(EntityTypeInterface $entity_type): array {
  $fields = [];

  // Create new fields for node bundle.
  if ($entity_type->id() === 'node') {
    $fields[BnfStateEnum::FIELD_NAME] = BaseFieldDefinition::create('list_integer')
      ->setName(BnfStateEnum::FIELD_NAME)
      ->setLabel(t('BNF State'))
      ->setDescription(t('The BNF state of the entity, defining if it was imported, exported, or neither.'))
      ->setSetting('allowed_values_function', 'bnf_get_bnf_state_allowed_values')
      ->setDefaultValue(BnfStateEnum::Undefined->value);
  }

  return $fields;
}

/**
 * Provides allowed values for the BNF State field.
 *
 * @return string[]
 *   The enum values of BnfStateEnum.
 */
function bnf_get_bnf_state_allowed_values(): array {
  $values = [];
  foreach (BnfStateEnum::cases() as $case) {
    $values[$case->value] = $case->name;
  }
  return $values;
}
