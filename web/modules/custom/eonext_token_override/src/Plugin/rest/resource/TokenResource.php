<?php

namespace Drupal\eonext_token_override\Plugin\rest\resource;

use Drupal\dpl_library_token\LibraryToken;
use Drupal\dpl_library_token\LibraryTokenHandler;
use Drupal\rest\Plugin\ResourceBase;
use Drupal\rest\ResourceResponse;
use Drupal\rest\ResourceResponseInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * A resource for updating fbs authentication token.
 *
 * @RestResource(
 *   id = "eonext:token",
 *   label = @Translation("Set a new authentincation token"),
 *   serialization_class = "",
 *
 *   uri_paths = {
 *     "create" = "/eonext/v1/token",
 *   },
 *
 *   payload = {
 *     "name" = "token",
 *     "description" = "Token payload",
 *     "in" = "body",
 *     "required" = TRUE,
 *     "type" = "object",
 *     "properties" = {
 *       "access_token" = {
 *         "type" = "string",
 *       },
 *       "expires_in" = {
 *         "type" = "integer",
 *       },
 *     }
 *   },
 *
 *   responses = {
 *     200 = {
 *       "description" = "OK",
 *       "schema" = {
 *         "type" = "object",
 *         "properties" = {
 *           "status" = {
 *             "type" = "string",
 *             "description" = "Response status",
 *           },
 *         },
 *       },
 *     },
 *     400 = {
 *      "description" = "Error",
 *        "schema" = {
 *          "type" = "object",
 *          "properties" = {
 *            "status" = {
 *              "type" = "string",
 *              "description" = "Response status",
 *            },
 *            "message" = {
 *               "type" = "string",
 *               "description" = "Error message",
 *             },
 *          },
 *        },
 *     }
 *   }
 * )
 */
class TokenResource extends ResourceBase {

  /**
   * Library token handler service.
   *
   * @var \Drupal\dpl_library_token\LibraryTokenHandler
   */
  protected LibraryTokenHandler $libraryTokenHandler;

  /**
   * {@inheritDoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    // @todo Change the autogenerated stub
    $instance = parent::create($container, $configuration, $plugin_id, $plugin_definition);

    $instance->libraryTokenHandler = $container->get('dpl_library_token.handler');

    return $instance;
  }

  /**
   * Posts a new token to the server.
   *
   * @param \Symfony\Component\HttpFoundation\Request $request
   *   The request object containing the token.
   *
   * @return \Drupal\rest\ResourceResponseInterface
   *   The response object indicating the success or failure of the operation.
   */
  public function post(Request $request): ResourceResponseInterface {
    try {
      $newToken = LibraryToken::createFromResponseBody($request->getContent());
      $this->libraryTokenHandler->setToken($newToken);
    }
    catch (\Exception $exception) {
      return (new ResourceResponse([
        'status' => FALSE,
        'message' => $exception->getMessage(),
      ], Response::HTTP_BAD_REQUEST));
    }

    return (new ResourceResponse(['status' => TRUE], Response::HTTP_OK));
  }

}
