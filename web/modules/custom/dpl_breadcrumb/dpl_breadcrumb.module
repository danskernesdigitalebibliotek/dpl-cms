<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\TermInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dpl_breadcrumb_form_taxonomy_term_content_structure_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');

  $breadcrumb_item = \Drupal::routeMatch()->getParameter('taxonomy_term');

  if (!($breadcrumb_item instanceof Term)) {
    return;
  }

  $form['breadcrumb_children'] = [
    '#type' => 'details',
    '#title' => t('View content that has set this breadcrumb as a parent', [], ['context' => 'DPL admin UX']),
    '#weight' => 10,
    'items' => $service->getRenderedReferencingContent($breadcrumb_item, 'teaser'),
  ];
}

/**
 * Implements hook_preprocess_paragraph__TYPE().
 *
 * Prepares dynamic items for automatically displaying breadcrumb children.
 */
function dpl_breadcrumb_preprocess_paragraph__breadcrumb_children(array &$variables): void {
  $paragraph = $variables['paragraph'] ?? NULL;

  // In the preview (AKA backend view), we don't want to load dynamics.
  if (!($paragraph instanceof Paragraph) || $variables['view_mode'] === 'preview') {
    return;
  }

  $breadcrumb_items = $paragraph->get('field_breadcrumb_target')->referencedEntities();
  $breadcrumb_item = reset($breadcrumb_items);
  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');

  $variables['items'] = $service->getRenderedReferencingContent($breadcrumb_item);
  // Drupal will cache the whole paragraph, as it does not know that it is
  // embedding a dynamic list. We'll add a simple cache tag,
  // so it be invalidated if any nodes have been updated - e.g. the same kind of
  // cache tag that a view has.
  $variables['#cache']['tags'][] = 'dpl_breadcrumb.referencing';
}

/**
 * Custom helper function for preparing breadcrumb.
 *
 * We get it based on a node's field_breadcrumb_parent.
 */
function dpl_breadcrumb_preprocess_page(array &$variables): void {
  $node = $variables['node'] ?? NULL;
  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');

  if (empty($node)) {
    return;
  }

  $variables['breadcrumb'] = $service->getBreadcrumb($node);

  $breadcrumb_item = $service->getBreadcrumbItem($node);

  // If this node is part of the structure tree, we might display an automatic
  // list of the related children.
  if ($breadcrumb_item instanceof TermInterface && $breadcrumb_item->get('field_show_children')->getString() == '1') {
    $variables['breadcrumb_children'] = $service->getRenderedReferencingContent($breadcrumb_item);

    // Drupal will cache the whole page, as it does not know that it is
    // embedding a dynamic list. We'll add a simple cache tag,
    // so it be invalidated if any nodes have been updated - e.g. the same kind
    // of cache tag that a view has.
    $variables['#cache']['tags'][] = 'dpl_breadcrumb.referencing';
  }
}

/**
 * Implements hook_form_alter().
 *
 * Altering the node edit form, and detect if the current node already exists
 * in the content structure. If it does, we do not want the editor to be
 * able to change it, as it will be overwritten in the save() hook - and having
 * the field disabled, with a description is also good AX.
 */
function dpl_breadcrumb_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  if (!str_starts_with($form_id, 'node_') || !str_ends_with($form_id, '_edit_form')) {
    return;
  }

  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');

  $field_name = $service->getStructureFieldName();

  if (empty($form[$field_name]['widget'])) {
    return;
  }

  $field = &$form[$field_name]['widget'];

  $node = \Drupal::routeMatch()->getParameter('node');

  $breadcrumb_item = $service->getBreadcrumbItem($node);

  // If this node exists in the structure tree, we want to override data.
  if ($breadcrumb_item) {
    $breadcrumb_parent = $service->getStructureParent($breadcrumb_item);

    $field['#disabled'] = TRUE;
    $field['#default_value'] = [$breadcrumb_parent?->id()];
    $field['#description'] = t('TODO - A text that describes that this node already exists in the content structure and cannot be edited.', [], ['context' => 'DPL admin UX']);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dpl_breadcrumb_taxonomy_term_update(Term $term): void {
  _dpl_breadcrumb_structure_item_save($term);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function dpl_breadcrumb_taxonomy_term_insert(Term $term): void {
  _dpl_breadcrumb_structure_item_save($term);
}

/**
 * Helper function, run as hook when a breadcrumb item is saved.
 *
 * This will allow us to invalidate caches, and save referenced content.
 */
function _dpl_breadcrumb_structure_item_save(Term $term): void {
  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');
  $vid = $service->getStructureVid();

  if ($term->bundle() !== $vid) {
    return;
  }

  // We want to trigger a save on all nodes that are referenced.
  // This will trigger the logic happening in dpl_breadcrumb_node_presave(),
  // updating the relevant info in the breadcrumb field on the node.
  // We want to do this for all nodes that are referenced in the context tree.
  /** @var array<Term> $structure_tree */
  $structure_tree = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0, NULL, TRUE);

  foreach ($structure_tree as $structure_term) {
    /** @var array<\Drupal\Core\Entity\FieldableEntityInterface> $contents */
    $contents = $structure_term->get('field_content')->referencedEntities();

    // This should always be a single item array but we might as well do a loop.
    foreach ($contents as $content) {
      $content->save();
    }
  }

  \Drupal::service('cache_tags.invalidator')->invalidateTags(['dpl_breadcrumb.item']);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function dpl_breadcrumb_node_presave(Node $node): void {
  $service = \Drupal::service('dpl_breadcrumb.breadcrumb_helper');

  $field_name = $service->getStructureFieldName();

  if (!$node->hasField($field_name)) {
    return;
  }

  $breadcrumb_item = $service->getBreadcrumbItem($node);

  // If this node exists in the structure tree, we want to override data.
  if ($breadcrumb_item) {
    $breadcrumb_parent = $service->getStructureParent($breadcrumb_item);

    $node->set($field_name, [$breadcrumb_parent?->id()]);
  }

  \Drupal::service('cache_tags.invalidator')->invalidateTags(['dpl_breadcrumb.referencing']);
}

/**
 * Implements hook_token_info().
 *
 *  Introducing our custom token, used to build pretty breadcrumb URLs.
 *
 * @return array<mixed>
 *   see hook_token_info.
 */
function dpl_breadcrumb_token_info(): array {
  return [
    'types' => [
      'dpl_breadcrumb' => [
        'name' => 'DPL Breadcrumb',
      ],
    ],
    'tokens' => [
      'dpl_breadcrumb' => [
        'breadcrumb-url-alias' => [
          'name' => 'Breadcrumb URL alias',
        ],
      ],
    ],
  ];
}

/**
 * Implements hook_tokens().
 *
 * Used to create the URL alias, based on breadcrumb.
 *
 * @param string $type
 *   See hook_tokens().
 * @param array<mixed> $tokens
 *   See hook_tokens().
 * @param array<mixed> $data
 *   See hook_tokens().
 *
 * @return array<mixed>
 *   See hook_tokens().
 */
function dpl_breadcrumb_tokens(string $type, array $tokens, array $data): array {
  $token_original = $tokens['breadcrumb-url-alias'] ?? NULL;
  $node = $data['node'] ?? NULL;

  if ($type !== 'dpl_breadcrumb' || empty($token_original) || !($node instanceof Node)) {
    return [];
  }

  $breadcrumb =
    \Drupal::service('dpl_breadcrumb.breadcrumb_helper')->getBreadcrumbUrlString($node);

  return [
    $token_original => $breadcrumb,
  ];
}
