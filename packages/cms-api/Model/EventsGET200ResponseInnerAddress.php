<?php
/**
 * EventsGET200ResponseInnerAddress
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\CMS\Api\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * DPL CMS - REST API
 *
 * The REST API provide by the core REST module.
 *
 * The version of the OpenAPI document: Versioning not supported
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\CMS\Api\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EventsGET200ResponseInnerAddress model.
 *
 * Where the event occurs.
 *
 * @package DanskernesDigitaleBibliotek\CMS\Api\Model
 * @author  OpenAPI Generator team
 */

class EventsGET200ResponseInnerAddress 
{
        /**
     * Name of the location where the event occurs. This could be the name of a library branch.
     *
     * @var string|null
     * @SerializedName("location")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $location = null;

    /**
     * Street name and number.
     *
     * @var string|null
     * @SerializedName("street")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $street = null;

    /**
     * Zip code.
     *
     * @var int|null
     * @SerializedName("zip_code")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $zipCode = null;

    /**
     * City.
     *
     * @var string|null
     * @SerializedName("city")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $city = null;

    /**
     * Country code in ISO 3166-1 alpha-2 format. E.g. DK for Denmark.
     *
     * @var string|null
     * @SerializedName("country")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $country = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->location = array_key_exists('location', $data) ? $data['location'] : $this->location;
            $this->street = array_key_exists('street', $data) ? $data['street'] : $this->street;
            $this->zipCode = array_key_exists('zipCode', $data) ? $data['zipCode'] : $this->zipCode;
            $this->city = array_key_exists('city', $data) ? $data['city'] : $this->city;
            $this->country = array_key_exists('country', $data) ? $data['country'] : $this->country;
        }
    }

    /**
     * Gets location.
     *
     * @return string|null
     */
    public function getLocation(): ?string
    {
        return $this->location;
    }



    /**
     * Sets location.
     *
     * @param string|null $location  Name of the location where the event occurs. This could be the name of a library branch.
     *
     * @return $this
     */
    public function setLocation(?string $location = null): self
    {
        $this->location = $location;

        return $this;
    }

    /**
     * Gets street.
     *
     * @return string|null
     */
    public function getStreet(): ?string
    {
        return $this->street;
    }



    /**
     * Sets street.
     *
     * @param string|null $street  Street name and number.
     *
     * @return $this
     */
    public function setStreet(?string $street): self
    {
        $this->street = $street;

        return $this;
    }

    /**
     * Gets zipCode.
     *
     * @return int|null
     */
    public function getZipCode(): ?int
    {
        return $this->zipCode;
    }



    /**
     * Sets zipCode.
     *
     * @param int|null $zipCode  Zip code.
     *
     * @return $this
     */
    public function setZipCode(?int $zipCode): self
    {
        $this->zipCode = $zipCode;

        return $this;
    }

    /**
     * Gets city.
     *
     * @return string|null
     */
    public function getCity(): ?string
    {
        return $this->city;
    }



    /**
     * Sets city.
     *
     * @param string|null $city  City.
     *
     * @return $this
     */
    public function setCity(?string $city): self
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Gets country.
     *
     * @return string|null
     */
    public function getCountry(): ?string
    {
        return $this->country;
    }



    /**
     * Sets country.
     *
     * @param string|null $country  Country code in ISO 3166-1 alpha-2 format. E.g. DK for Denmark.
     *
     * @return $this
     */
    public function setCountry(?string $country): self
    {
        $this->country = $country;

        return $this;
    }
}


