<?php
/**
 * EventsGET200ResponseInnerTicketCategoriesInnerPrice
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  DanskernesDigitaleBibliotek\CMS\Api\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * DPL CMS - REST API
 *
 * The REST API provide by the core REST module.
 *
 * The version of the OpenAPI document: Versioning not supported
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace DanskernesDigitaleBibliotek\CMS\Api\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the EventsGET200ResponseInnerTicketCategoriesInnerPrice model.
 *
 * The price of a ticket in the category
 *
 * @package DanskernesDigitaleBibliotek\CMS\Api\Model
 * @author  OpenAPI Generator team
 */

class EventsGET200ResponseInnerTicketCategoriesInnerPrice 
{
        /**
     * The currency of the price in ISO 4217 format. E.g. DKK for Danish krone.
     *
     * @var string|null
     * @SerializedName("currency")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $currency = null;

    /**
     * The price of a ticket in the minor unit of the currency. E.g. 750 for 7,50 EUR. Use 0 for free tickets.
     *
     * @var float|null
     * @SerializedName("value")
     * @Assert\NotNull()
     * @Assert\Type("float")
     * @Type("float")
     */
    protected ?float $value = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->currency = array_key_exists('currency', $data) ? $data['currency'] : $this->currency;
            $this->value = array_key_exists('value', $data) ? $data['value'] : $this->value;
        }
    }

    /**
     * Gets currency.
     *
     * @return string|null
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }



    /**
     * Sets currency.
     *
     * @param string|null $currency  The currency of the price in ISO 4217 format. E.g. DKK for Danish krone.
     *
     * @return $this
     */
    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Gets value.
     *
     * @return float|null
     */
    public function getValue(): ?float
    {
        return $this->value;
    }



    /**
     * Sets value.
     *
     * @param float|null $value  The price of a ticket in the minor unit of the currency. E.g. 750 for 7,50 EUR. Use 0 for free tickets.
     *
     * @return $this
     */
    public function setValue(?float $value): self
    {
        $this->value = $value;

        return $this;
    }
}


