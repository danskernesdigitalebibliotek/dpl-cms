# This is a go-task file for various developer tasks
# e.g. building docker images and setting up local development.
# You can read about the Task files here: https://taskfile.dev.
version: '3'

dotenv: [".task.env"]

vars:
  # Docker file registry.
  REGISTRY: '{{.REGISTRY | default "ghcr.io"}}'
  # Github organization.
  ORG: '{{.ORG | default "danskernesdigitalebibliotek"}}'
  # Get total amount of commits on the main branch. Used as build number.
  COMMIT_COUNT:
    sh: git rev-list --count origin/main
  # The version number we want to tag the source build with.
  # It can be specified by adding SOURCE_VERSION=XX when running command.
  # Otherwise it will default to the COMMIT_COUNT variable.
  SOURCE_VERSION: '{{.SOURCE_VERSION | default .COMMIT_COUNT }}'
  # Using the name of this project as a namespace of the docker image.
  DOCKER_IMAGE_NAMESPACE: '{{.DOCKER_IMAGE_NAMESPACE | default "dpl-cms"}}'
  # Constructing docker image name.
  DOCKER_IMAGE_PREFIX: "{{ .REGISTRY }}/{{ .ORG }}/{{ .DOCKER_IMAGE_NAMESPACE }}"
  # Constructing docker image name.
  IMAGE_SOURCE: "{{ .DOCKER_IMAGE_PREFIX }}-source:{{ .SOURCE_VERSION }}"
  # Where is the docker file(s) we use for our builds residing?
  LAGOON_DIR: "lagoon"
  DOCKER_COMPOSE_FILES: '{{.DOCKER_COMPOSE_FILES | default "-f docker-compose.yml"}}'

tasks:
  ghcr:login:
    summary: Login into Github Container Registry
    cmds:
      - echo {{ .CR_PAT }} | docker login {{ .REGISTRY }} -u username-not-used --password-stdin
    preconditions:
      - sh: "[ ! -z {{.CR_PAT}} ]"
        msg: "Env variable CR_PAT is not set or empty."

  dev:cli:
    summary: Performs command inside container. Expects parameter(s).
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run cli sh -c "{{.CLI_ARGS}}"

  dev:start:
    summary: Run docker compose
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} up -d

  dev:stop:
    summary: Stop docker compose environment
    cmds:
      # DNS proxies such as Dory may hang on to the network for a bit which
      # causes the process to fail. Wait and retry if that is the case
      - docker compose {{ .DOCKER_COMPOSE_FILES }} down --volumes --remove-orphans || (sleep 3 && docker-compose down)

  dev:reset:
    desc: Create local development setup in a clean state
    cmds:
      - task dev:stop
      - cp -n .env.example .env || true
      - task dev:cli -- composer install
      - task dev:start
      - task dev:cli -- drush site-install --existing-config -y
      # We don't really need to purge the external cache
      # since we are working with fresh containers.
      # But we want catch if something is wrong with the setup.
      - task dev:cli -- drush cache:rebuild-external -y
      - task dev:cli -- drush user-login

  dev:phpunit:
    desc: Run PHPUnit tests with code coverage
    cmds:
      - docker compose run -e XDEBUG_ENABLE=true cli vendor/bin/phpunit --coverage-text

  ci:reset:
    desc: Create CI setup in a clean state
    cmds:
      - task dev:reset
    env:
      DOCKER_COMPOSE_FILES: "-f docker-compose.yml -f docker-compose.ci.yml"

  ci:behat:
    desc: Run Behat functional tests
    cmds:
      - task dev:cli -- vendor/bin/behat
    vars:
      DOCKER_COMPOSE_FILES: "-f docker-compose.yml -f docker-compose.ci.yml"

  ci:pa11y:
    desc: Run Pa11y to test accessiblity
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run node-chrome npm ci
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run node-chrome npx pa11y-ci
    vars:
      DOCKER_COMPOSE_FILES: "-f docker-compose.yml -f docker-compose.ci.yml"

  ci:lighthouse:
    desc: Run Lighthouse to test performance
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run node-chrome npm ci
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run node-chrome npx lhci autorun
    vars:
      DOCKER_COMPOSE_FILES: "-f docker-compose.yml -f docker-compose.ci.yml"

  source:build:
    summary: Build core source image.
    cmds:
      - docker build -f {{ .LAGOON_DIR }}/cli.dockerfile --tag dpl-cms-cli:0.0.0 .
      - docker build -f {{ .LAGOON_DIR }}/source.dockerfile --tag {{ .IMAGE_SOURCE }} .

  source:push:
    summary: Push core source image to container registry.
    deps: [ghcr:login]
    cmds:
      - docker push {{ .IMAGE_SOURCE }}

  source:deploy:
    desc: Build and push core source docker image.
    cmds:
      - task: source:build
      - task: source:push
