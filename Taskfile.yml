# This is a go-task file for various developer tasks
# e.g. building docker images and setting up local development.
# You can read about the Task files here: https://taskfile.dev.
version: '3'

dotenv: [".task.env"]

vars:
  # Docker image registry.
  # Eg.
  #   - ghcr.io/danskernesdigitalebibliotek
  #   - docker.io/someregistry
  RELEASE_IMAGE_REGISTRY: '{{.RELEASE_IMAGE_REGISTRY | default "ghcr.io/danskernesdigitalebibliotek"}}'
  # Get total amount of commits on the main branch. Used as build number.
  COMMIT_COUNT:
    sh: git rev-list --count origin/main
  # The version number we want to tag the source build with.
  # It can be specified by adding RELEASE_TAG=XX when running command.
  # Otherwise it will default to the COMMIT_COUNT variable.
  RELEASE_IMAGE_TAG: '{{.RELEASE_IMAGE_TAG | default .COMMIT_COUNT }}'
  # Constructing docker image name.
  DOCKER_IMAGE_PREFIX: "{{ .RELEASE_IMAGE_REGISTRY }}/{{ .DOCKER_IMAGE_NAMESPACE }}"
  # Constructing docker image name.
  RELEASE_IMAGE_NAME: '{{.RELEASE_IMAGE_NAME | default "dpl-cms-source"}}'
  RELEASE_FULL_NAME: '{{.RELEASE_IMAGE_REGISTRY}}/{{.RELEASE_IMAGE_NAME}}:{{.RELEASE_IMAGE_TAG}}'
  # Where is the docker file(s) we use for our builds residing?
  LAGOON_DIR: "lagoon"
  DOCKER_COMPOSE_FILES_OSX: '{{if eq OS "darwin"}}-f docker-compose.mac-nfs.yml{{end}}'
  DOCKER_COMPOSE_FILES_DEFAULT: '-f docker-compose.yml {{ .DOCKER_COMPOSE_FILES_OSX }}'
  DOCKER_COMPOSE_FILES: '{{.DOCKER_COMPOSE_FILES | default .DOCKER_COMPOSE_FILES_DEFAULT }}'
  DOCKER_COMPOSE_FILES_CI: '{{.DOCKER_COMPOSE_FILES}} -f docker-compose.ci.yml'
  # Sql dump files directory
  DIR_RESTORE_DATABASE: 'restore/database'
  # Directory with lagoon backup files.
  DIR_RESTORE_FILES: 'restore/files'

tasks:
  ghcr:login:
    summary: Login into Github Container Registry
    cmds:
      - echo {{ .CR_PAT }} | docker login {{ .RELEASE_IMAGE_REGISTRY }} -u username-not-used --password-stdin
    preconditions:
      - sh: "[ ! -z {{.CR_PAT}} ]"
        msg: "Env variable CR_PAT is not set or empty."

  dev:cli:
    summary: Performs command inside container. Expects parameter(s).
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} run --rm cli sh -c "{{.CLI_ARGS}}"

  dev:start:
    summary: Run docker compose
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES }} up -d

  dev:stop:
    summary: Stop docker compose environment
    cmds:
      # DNS proxies such as Dory may hang on to the network for a bit which
      # causes the process to fail. Wait and retry if that is the case
      - docker compose {{ .DOCKER_COMPOSE_FILES }} down --volumes --remove-orphans || (sleep 3 && docker-compose down)

  dev:reset:
    desc: Create local development setup in a clean state
    cmds:
      # Stop potential running environment.
      - task dev:stop
      # Create a .env file with recommended defaults.
      - cp -n .env.example .env || true
      # Build site.
      - task dev:cli -- composer install
      # Start local environment.
      - task dev:start
      # Install site.
      - task dev:cli -- drush site-install --existing-config -y
      # Import translations.
      - task dev:cli -- drush locale-check
      - task dev:cli -- drush locale-update
      # We don't really need to purge the external cache
      # since we are working with fresh containers.
      # But we want catch if something is wrong with the setup.
      - task dev:cache:clear:external
      # Show a one-time login to the local site.
      - task dev:cli -- drush user-login

  dev:phpunit:
    desc: Run PHPUnit tests with code coverage
    cmds:
      - docker compose run -e XDEBUG_ENABLE=true cli vendor/bin/phpunit --coverage-text

  dev:restore:database:
    desc: 'Restore database from db dump file. Only one sql should be present the "{{ .DIR_RESTORE_DATABASE }}" directory.'
    cmds:
      - docker-compose exec -T {{ .MYSQL_CONTAINER }} mysql < {{ .SQL_FILE }}
      - task dev:cache:clear:all
    preconditions:
      - sh: "[ {{ .SQL_FILES_COUNT }} -gt 0 ]"
        msg: "There are no sql files in {{ .DIR_RESTORE_DATABASE }}/. Cannot continue."
      - sh: "[ {{ .SQL_FILES_COUNT }} -eq 1 ]"
        msg: "There are {{ .SQL_FILES_COUNT }} valid files in {{ .DIR_RESTORE_DATABASE }}/:\n{{ .DIR_RESTORE_DATABASE_CONTENT }}\n...there should be just one."
    vars:
      SQL_FILES_COUNT:
        sh: ls {{ .DIR_RESTORE_DATABASE }}/*.sql | wc -l 2> /dev/null | xargs
      SQL_FILE:
        sh: ls -t "{{ .DIR_RESTORE_DATABASE }}"/*.sql
      DIR_RESTORE_DATABASE_CONTENT:
       sh: ls {{ .DIR_RESTORE_DATABASE }}
      MYSQL_CONTAINER: 'mariadb'

  dev:restore:files:
    desc: 'Restore files by overwriting existing with the ones from the Lagoon backup package'
    cmds:
      - docker-compose exec cli sh dev-scripts/cli-restore-lagoon-files.sh {{ .DIR_RESTORE_FILES }}
      - task dev:cache:clear:all

  dev:cache:clear:all:
    summary: Clears all cache
    deps: [dev:cache:clear:drupal, dev:cache:clear:external]

  dev:cache:clear:drupal:
    summary: Runs Drupal cache rebuild
    cmds:
      - task dev:cli -- drush cache:rebuild -y

  dev:cache:clear:external:
    summary: Purges the varnish cache
    cmds:
      - task dev:cli -- drush cache:rebuild-external -y

  ci:reset:
    desc: Create CI setup in a clean state
    cmds:
      - task dev:reset
    env:
      DOCKER_COMPOSE_FILES: "{{ .DOCKER_COMPOSE_FILES_CI }}"

  ci:behat:
    desc: Run Behat functional tests
    cmds:
      - task dev:cli -- vendor/bin/behat
    env:
      DOCKER_COMPOSE_FILES: "{{ .DOCKER_COMPOSE_FILES_CI }}"

  ci:pa11y:
    desc: Run Pa11y to test accessiblity
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES_CI }} run node-chrome npm ci
      - docker compose {{ .DOCKER_COMPOSE_FILES_CI }} run node-chrome npx pa11y-ci

  ci:lighthouse:
    desc: Run Lighthouse to test performance
    cmds:
      - docker compose {{ .DOCKER_COMPOSE_FILES_CI }} run node-chrome npm ci
      - docker compose {{ .DOCKER_COMPOSE_FILES_CI }} run node-chrome npx lhci autorun

  source:build:
    summary: Build core source image.
    cmds:
      - docker build -f {{ .LAGOON_DIR }}/cli.dockerfile --tag dpl-cms-cli:0.0.0 .
      - docker build -f {{ .LAGOON_DIR }}/source.dockerfile --tag {{ .RELEASE_FULL_NAME }} .

  source:push:
    summary: Push core source image to container registry.
    deps: [ghcr:login]
    cmds:
      - docker push {{ .RELEASE_FULL_NAME }}

  source:deploy:
    desc: Build and push core source docker image.
    cmds:
      - task: source:build
      - task: source:push
